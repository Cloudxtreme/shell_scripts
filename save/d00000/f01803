<html>
<head><title>cryptlib</title></head>

<body background="img/backgrou.gif" bgcolor="#C0C0C0" text="#000000" link="#0066BB" vlink="#000000">

<center><h2><img src="img/t_interf.gif" alt="Programming interface"></h2></center>

<table>

<tr><td valign=top><img src="img/blob.gif"></td><td>
The application programming interface (API) serves as an interface to a range
of plug-in encryption modules that allow encryption algorithms to be added in
a fairly transparent manner, so that adding a new algorithm or replacing an
existing software implementation with custom encryption hardware can be done
without any trouble.  The standardised API allows any of the algorithms and
modes supported by cryptlib to be used with a minimum of coding effort.  In
addition the easy-to-use high-level routines allow for the exchange of
encrypted or signed messages or the establishment of secure communications
channels with a minimum of programming overhead.  Language bindings are
available for C / C++, C# / .NET, Delphi, Java, Python, and Visual Basic (VB).
</td></tr>

<tr><td valign=top><img src="img/blob.gif"></td><td>
cryptlib has been written to be as foolproof as possible.  On initialisation
it performs extensive self-testing against test data from encryption standards
documents, and the APIs check each parameter and function call for errors
before any actions are performed, with error reporting down to the level of
individual parameters.  In addition logical errors such as, for example, a key
exchange function being called in the wrong sequence, are checked for and
identified.
</td></tr>

<tr><td valign=top><img src="img/blob.gif"></td><td>
cryptlib comes with extensive documentation in the form of a 330-page 
<a href="download.html">user manual</a> and a 420-page 
<a href="http://www.springer.com/east/home/generic/search/results?SGWID=5-40109-22-2282393-0">
technical reference manual<a>.  The user manual is intended for everyday
cryptlib use and contains detailed documentation on every aspect of cryptlib's
functionality. In most cases the code needed to secure an application can be
cut and pasted directly from the appropriate section of the manual, avoiding
the need to learn yet another programming API.  The user manual concludes with
a reference section covering the various cryptlib API functions, constants,
and data types.
</td></tr>

<tr><td valign=top><img src="img/blob.gif"></td><td>
The technical reference manual covers the design and internals of cryptlib
itself, including the cryptlib security model and security mechanisms that
protect every part of cryptlib.s operation.  In addition the technical manual
provides a wealth of background information to help users understand the
security foundations on which cryptlib is built.
</td></tr>

<tr><td valign=top><img src="img/blob.gif"></td><td>
cryptlib is re-entrant and completely thread-safe, allowing it to be used with
multithreaded applications on systems that support threads.  Because it is
thread-safe, lengthy cryptlib operations can be run in the background if
required while other processing is performed in the foreground.  In addition
cryptlib itself is multithreaded so that computationally intensive internal
operations take place in the background without impacting the performance of
the calling application.
</td></tr>

<tr><td valign=top><img src="img/blob.gif"></td><td>
Most of the core algorithms used in cryptlib have been implemented in assembly
language in order to provide the maximum possible performance, and will take
advantage of crypto hardware acceleration facilities present in some CPUs such
as the Via C3 family.  These routines provide an unprecedented level of
performance, in most cases running faster than expensive, specialised
encryption hardware designed to perform the same task.  This means that
cryptlib can be used for high-bandwidth applications such as video/audio
encryption and online network and disk encryption without the need to resort
to expensive, specialised encryption hardware.
</td></tr>

</table>
</p>

</body>

</html>

