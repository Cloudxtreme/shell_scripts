<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>talloc: The talloc reference function.</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.3 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>The talloc reference function.<br/>
<small>
[<a class="el" href="group__talloc.html">The talloc API</a>]</small>
</h1>
<p>This module contains the definitions around talloc references.  
<a href="#_details">More...</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__ref.html#ga1d70927673b42a6d2e42823307280502">talloc_increase_ref_count</a> (const void *ptr)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Increase the reference count of a talloc chunk.  <a href="#ga1d70927673b42a6d2e42823307280502"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__ref.html#gac8bc504b29c4a0b3252e69f14a241035">talloc_reference_count</a> (const void *ptr)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the number of references to a talloc chunk.  <a href="#gac8bc504b29c4a0b3252e69f14a241035"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__ref.html#ga573831a64a47a33cce8c80bde085e158">talloc_reference</a> (const void *ctx, const void *ptr)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create an additional talloc parent to a pointer.  <a href="#ga573831a64a47a33cce8c80bde085e158"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__ref.html#ga8054dd3561f33dd4a0d6942839868bb5">talloc_unlink</a> (const void *context, void *ptr)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Remove a specific parent from a talloc chunk.  <a href="#ga8054dd3561f33dd4a0d6942839868bb5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__ref.html#ga68f90d9a904bc2125b9bb60146f004de">talloc_autofree_context</a> (void)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Provide a talloc context that is freed at program exit.  <a href="#ga68f90d9a904bc2125b9bb60146f004de"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__ref.html#ga0cbdb71be91a8a1e8f9dc6486beb690f">talloc_get_size</a> (const void *ctx)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the size of a talloc chunk.  <a href="#ga0cbdb71be91a8a1e8f9dc6486beb690f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__ref.html#gaba977c578a3d871e6f1ec53b67495ce2">talloc_show_parents</a> (const void *context, FILE *file)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Show the parentage of a context.  <a href="#gaba977c578a3d871e6f1ec53b67495ce2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__ref.html#ga7d00105b11e2a92a2e6972b3d0df0ba5">talloc_is_parent</a> (const void *context, const void *ptr)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Check if a context is parent of a talloc chunk.  <a href="#ga7d00105b11e2a92a2e6972b3d0df0ba5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__ref.html#gad08d78c3987437a5753efc55379f0566">talloc_reparent</a> (const void *old_parent, const void *new_parent, const void *ptr)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the parent context of a talloc pointer.  <a href="#gad08d78c3987437a5753efc55379f0566"></a><br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>This module contains the definitions around talloc references. </p>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga68f90d9a904bc2125b9bb60146f004de"></a><!-- doxytag: member="talloc.h::talloc_autofree_context" ref="ga68f90d9a904bc2125b9bb60146f004de" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* talloc_autofree_context </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Provide a talloc context that is freed at program exit. </p>
<p>This is a handy utility function that returns a talloc context which will be automatically freed on program exit. This can be used to reduce the noise in memory leak reports.</p>
<p>Never use this in code that might be used in objects loaded with dlopen and unloaded with dlclose. <a class="el" href="group__talloc__ref.html#ga68f90d9a904bc2125b9bb60146f004de" title="Provide a talloc context that is freed at program exit.">talloc_autofree_context()</a> internally uses atexit(3). Some platforms like modern Linux handles this fine, but for example FreeBSD does not deal well with dlopen() and atexit() used simultaneously: dlclose() does not clean up the list of atexit-handlers, so when the program exits the code that was registered from within <a class="el" href="group__talloc__ref.html#ga68f90d9a904bc2125b9bb60146f004de" title="Provide a talloc context that is freed at program exit.">talloc_autofree_context()</a> is gone, the program crashes at exit.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>A talloc context, NULL on error. </dd></dl>

</div>
</div>
<a class="anchor" id="ga0cbdb71be91a8a1e8f9dc6486beb690f"></a><!-- doxytag: member="talloc.h::talloc_get_size" ref="ga0cbdb71be91a8a1e8f9dc6486beb690f" args="(const void *ctx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t talloc_get_size </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>ctx</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the size of a talloc chunk. </p>
<p>This function lets you know the amount of memory allocated so far by this context. It does NOT account for subcontext memory. This can be used to calculate the size of an array.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ctx</em>&nbsp;</td><td>The talloc chunk.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The size of the talloc chunk. </dd></dl>

</div>
</div>
<a class="anchor" id="ga1d70927673b42a6d2e42823307280502"></a><!-- doxytag: member="talloc.h::talloc_increase_ref_count" ref="ga1d70927673b42a6d2e42823307280502" args="(const void *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int talloc_increase_ref_count </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>ptr</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Increase the reference count of a talloc chunk. </p>
<p>The talloc_increase_ref_count(ptr) function is exactly equivalent to:</p>
<div class="fragment"><pre class="fragment">      <a class="code" href="group__talloc__ref.html#ga573831a64a47a33cce8c80bde085e158" title="Create an additional talloc parent to a pointer.">talloc_reference</a>(NULL, ptr);
</pre></div><p>You can use either syntax, depending on which you think is clearer in your code.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ptr</em>&nbsp;</td><td>The pointer to increase the reference count.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>0 on success, -1 on error. </dd></dl>

</div>
</div>
<a class="anchor" id="ga7d00105b11e2a92a2e6972b3d0df0ba5"></a><!-- doxytag: member="talloc.h::talloc_is_parent" ref="ga7d00105b11e2a92a2e6972b3d0df0ba5" args="(const void *context, const void *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int talloc_is_parent </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>ptr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check if a context is parent of a talloc chunk. </p>
<p>This checks if context is referenced in the talloc hierarchy above ptr.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>context</em>&nbsp;</td><td>The assumed talloc context.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ptr</em>&nbsp;</td><td>The talloc chunk to check.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Return 1 if this is the case, 0 if not. </dd></dl>

</div>
</div>
<a class="anchor" id="ga573831a64a47a33cce8c80bde085e158"></a><!-- doxytag: member="talloc.h::talloc_reference" ref="ga573831a64a47a33cce8c80bde085e158" args="(const void *ctx, const void *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* talloc_reference </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>ptr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create an additional talloc parent to a pointer. </p>
<p>The <a class="el" href="group__talloc__ref.html#ga573831a64a47a33cce8c80bde085e158" title="Create an additional talloc parent to a pointer.">talloc_reference()</a> function makes "context" an additional parent of ptr. Each additional reference consumes around 48 bytes of memory on intel x86 platforms.</p>
<p>If ptr is NULL, then the function is a no-op, and simply returns NULL.</p>
<p>After creating a reference you can free it in one of the following ways:</p>
<ul>
<li>you can <a class="el" href="group__talloc.html#ga3de117af6571f568866ec311bcd75f86" title="Free a chunk of talloc memory.">talloc_free()</a> any parent of the original pointer. That will reduce the number of parents of this pointer by 1, and will cause this pointer to be freed if it runs out of parents.</li>
</ul>
<ul>
<li>you can <a class="el" href="group__talloc.html#ga3de117af6571f568866ec311bcd75f86" title="Free a chunk of talloc memory.">talloc_free()</a> the pointer itself if it has at maximum one parent. This behaviour has been changed since the release of version 2.0. Further informations in the description of "talloc_free".</li>
</ul>
<p>For more control on which parent to remove, see <a class="el" href="group__talloc__ref.html#ga8054dd3561f33dd4a0d6942839868bb5" title="Remove a specific parent from a talloc chunk.">talloc_unlink()</a> </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ctx</em>&nbsp;</td><td>The additional parent.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ptr</em>&nbsp;</td><td>The pointer you want to create an additional parent for.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The original pointer 'ptr', NULL if talloc ran out of memory in creating the reference.</dd></dl>
<p>Example: </p>
<div class="fragment"><pre class="fragment">      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *a, *b, *c;
      a = <a class="code" href="group__talloc.html#ga69f0cbf5b2aed849a5b826f42e218bfa" title="Create a new talloc context.">talloc</a>(NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
      b = <a class="code" href="group__talloc.html#ga69f0cbf5b2aed849a5b826f42e218bfa" title="Create a new talloc context.">talloc</a>(NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
      c = <a class="code" href="group__talloc.html#ga69f0cbf5b2aed849a5b826f42e218bfa" title="Create a new talloc context.">talloc</a>(a, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
      <span class="comment">// b also serves as a parent of c.</span>
      <a class="code" href="group__talloc__ref.html#ga573831a64a47a33cce8c80bde085e158" title="Create an additional talloc parent to a pointer.">talloc_reference</a>(b, c);
</pre></div><dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__talloc__ref.html#ga8054dd3561f33dd4a0d6942839868bb5" title="Remove a specific parent from a talloc chunk.">talloc_unlink()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="gac8bc504b29c4a0b3252e69f14a241035"></a><!-- doxytag: member="talloc.h::talloc_reference_count" ref="gac8bc504b29c4a0b3252e69f14a241035" args="(const void *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t talloc_reference_count </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>ptr</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the number of references to a talloc chunk. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ptr</em>&nbsp;</td><td>The pointer to retrieve the reference count from.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The number of references. </dd></dl>

</div>
</div>
<a class="anchor" id="gad08d78c3987437a5753efc55379f0566"></a><!-- doxytag: member="talloc.h::talloc_reparent" ref="gad08d78c3987437a5753efc55379f0566" args="(const void *old_parent, const void *new_parent, const void *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void* talloc_reparent </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>old_parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>new_parent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>ptr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the parent context of a talloc pointer. </p>
<p>The function changes the parent context of a talloc pointer. It is typically used when the context that the pointer is currently a child of is going to be freed and you wish to keep the memory for a longer time.</p>
<p>The difference between <a class="el" href="group__talloc__ref.html#gad08d78c3987437a5753efc55379f0566" title="Change the parent context of a talloc pointer.">talloc_reparent()</a> and <a class="el" href="group__talloc.html#gaccc66139273e727183fb5bdda11ef82c" title="Change a talloc chunk&#39;s parent.">talloc_steal()</a> is that <a class="el" href="group__talloc__ref.html#gad08d78c3987437a5753efc55379f0566" title="Change the parent context of a talloc pointer.">talloc_reparent()</a> can specify which parent you wish to change. This is useful when a pointer has multiple parents via references.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>old_parent</em>&nbsp;</td><td></td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>new_parent</em>&nbsp;</td><td></td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ptr</em>&nbsp;</td><td></td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>Return the pointer you passed. It does not have any failure modes. </dd></dl>

</div>
</div>
<a class="anchor" id="gaba977c578a3d871e6f1ec53b67495ce2"></a><!-- doxytag: member="talloc.h::talloc_show_parents" ref="gaba977c578a3d871e6f1ec53b67495ce2" args="(const void *context, FILE *file)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void talloc_show_parents </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&nbsp;</td>
          <td class="paramname"> <em>file</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Show the parentage of a context. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>context</em>&nbsp;</td><td>The talloc context to look at.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>file</em>&nbsp;</td><td>The output to use, a file, stdout or stderr. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8054dd3561f33dd4a0d6942839868bb5"></a><!-- doxytag: member="talloc.h::talloc_unlink" ref="ga8054dd3561f33dd4a0d6942839868bb5" args="(const void *context, void *ptr)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int talloc_unlink </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>context</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>ptr</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Remove a specific parent from a talloc chunk. </p>
<p>The function removes a specific parent from ptr. The context passed must either be a context used in <a class="el" href="group__talloc__ref.html#ga573831a64a47a33cce8c80bde085e158" title="Create an additional talloc parent to a pointer.">talloc_reference()</a> with this pointer, or must be a direct parent of ptr.</p>
<p>You can just use <a class="el" href="group__talloc.html#ga3de117af6571f568866ec311bcd75f86" title="Free a chunk of talloc memory.">talloc_free()</a> instead of <a class="el" href="group__talloc__ref.html#ga8054dd3561f33dd4a0d6942839868bb5" title="Remove a specific parent from a talloc chunk.">talloc_unlink()</a> if there is at maximum one parent. This behaviour has been changed since the release of version 2.0. Further informations in the description of "talloc_free".</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>context</em>&nbsp;</td><td>The talloc parent to remove.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ptr</em>&nbsp;</td><td>The talloc ptr you want to remove the parent from.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>0 on success, -1 on error.</dd></dl>
<dl class="note"><dt><b>Note:</b></dt><dd>If the parent has already been removed using <a class="el" href="group__talloc.html#ga3de117af6571f568866ec311bcd75f86" title="Free a chunk of talloc memory.">talloc_free()</a> then this function will fail and will return -1. Likewise, if ptr is NULL, then the function will make no modifications and return -1.</dd></dl>
<p>Example: </p>
<div class="fragment"><pre class="fragment">      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *a, *b, *c;
      a = <a class="code" href="group__talloc.html#ga69f0cbf5b2aed849a5b826f42e218bfa" title="Create a new talloc context.">talloc</a>(NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
      b = <a class="code" href="group__talloc.html#ga69f0cbf5b2aed849a5b826f42e218bfa" title="Create a new talloc context.">talloc</a>(NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
      c = <a class="code" href="group__talloc.html#ga69f0cbf5b2aed849a5b826f42e218bfa" title="Create a new talloc context.">talloc</a>(a, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
      <span class="comment">// b also serves as a parent of c.</span>
      <a class="code" href="group__talloc__ref.html#ga573831a64a47a33cce8c80bde085e158" title="Create an additional talloc parent to a pointer.">talloc_reference</a>(b, c);
      <a class="code" href="group__talloc__ref.html#ga8054dd3561f33dd4a0d6942839868bb5" title="Remove a specific parent from a talloc chunk.">talloc_unlink</a>(b, c);
</pre></div> 
</div>
</div>
</div>
<hr class="footer"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.3 </small></address>
</body>
</html>
