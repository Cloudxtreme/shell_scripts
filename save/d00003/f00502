<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>talloc: The Tutorial</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.3 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="navpath"><a class="el" href="index.html">index</a>
  </div>
</div>
<div class="contents">


<h1><a class="anchor" id="libtalloc_tutorial">The Tutorial </a></h1><h2><a class="anchor" id="introduction">
Introduction</a></h2>
<p>Talloc is a hierarchical, reference counted memory pool system with destructors. It is built atop the C standard library and it defines a set of utility functions that altogether simplifies allocation and deallocation of data, especially for complex structures that contain many dynamically allocated elements such as strings and arrays.</p>
<p>The main goals of this library are: removing the needs for creating a cleanup function for every complex structure, providing a logical organization of allocated memory blocks and reducing the likelihood of creating memory leaks in long-running applications. All of this is achieved by allocating memory in a hierarchical structure of talloc contexts such that deallocating one context recursively frees all of its descendants as well.</p>
<h2><a class="anchor" id="main-features">
Main features</a></h2>
<ul>
<li>An open source project</li>
<li>A hierarchical memory model</li>
<li>Natural projection of data structures into the memory space</li>
<li>Simplifies memory management of large data structures</li>
<li>Automatic execution of a destructor before the memory is freed</li>
<li>Simulates a dynamic type system</li>
<li>Implements a transparent memory pool</li>
</ul>
<h2><a class="anchor" id="toc">
Table of contents:</a></h2>
<p><a class="el" href="libtalloc__context.html">Chapter 1: Talloc context</a></p>
<p><a class="el" href="libtalloc__stealing.html">Chapter 2: Stealing a context</a></p>
<p><a class="el" href="libtalloc__dts.html">Chapter 3: Dynamic type system</a></p>
<p><a class="el" href="libtalloc__destructors.html">Chapter 4: Using destructors</a></p>
<p><a class="el" href="libtalloc__pools.html">Chapter 5: Memory pools</a></p>
<p><a class="el" href="libtalloc__debugging.html">Chapter 6: Debugging</a></p>
<p><a class="el" href="libtalloc__bestpractices.html">Chapter 7: Best practises</a> </p>
</div>
<hr class="footer"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.3 </small></address>
</body>
</html>
