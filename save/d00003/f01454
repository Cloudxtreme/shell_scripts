<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>talloc: The talloc debugging support functions</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.3 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>The talloc debugging support functions<br/>
<small>
[<a class="el" href="group__talloc.html">The talloc API</a>]</small>
</h1>
<p>To aid memory debugging, talloc contains routines to inspect the currently allocated memory hierarchy.  
<a href="#_details">More...</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__debug.html#ga62dc4c6ec8c0a233b508f91d8fb54e69">talloc_report_depth_cb</a> (const void *ptr, int depth, int max_depth, void(*callback)(const void *ptr, int depth, int max_depth, int is_ref, void *private_data), void *private_data)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Walk a complete talloc hierarchy.  <a href="#ga62dc4c6ec8c0a233b508f91d8fb54e69"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__debug.html#ga13062669ca8e4b787911c206e339f61c">talloc_report_depth_file</a> (const void *ptr, int depth, int max_depth, FILE *f)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Print a talloc hierarchy.  <a href="#ga13062669ca8e4b787911c206e339f61c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__debug.html#ga66136eb6105416bfcbd390ce6a4fc89c">talloc_report_full</a> (const void *ptr, FILE *f)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Print a summary report of all memory used by ptr.  <a href="#ga66136eb6105416bfcbd390ce6a4fc89c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__debug.html#ga4f4ff95ce5a95f61cc453fc943e3de65">talloc_report</a> (const void *ptr, FILE *f)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Print a summary report of all memory used by ptr.  <a href="#ga4f4ff95ce5a95f61cc453fc943e3de65"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__debug.html#gad50534c2b22274a94c722f0790ae102f">talloc_enable_null_tracking</a> (void)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable tracking the use of NULL memory contexts.  <a href="#gad50534c2b22274a94c722f0790ae102f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__debug.html#gabd90af3895fee1960e90590fabe92a99">talloc_enable_null_tracking_no_autofree</a> (void)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable tracking the use of NULL memory contexts.  <a href="#gabd90af3895fee1960e90590fabe92a99"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__debug.html#ga2d7d9d0b7c8ca726c537080f20de97e1">talloc_disable_null_tracking</a> (void)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Disable tracking of the NULL memory context.  <a href="#ga2d7d9d0b7c8ca726c537080f20de97e1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__debug.html#gac6f0c065b4ed391acb5c74240a8647bc">talloc_enable_leak_report</a> (void)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable leak report when a program exits.  <a href="#gac6f0c065b4ed391acb5c74240a8647bc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__debug.html#gab01ab00014902d25e9eaba9fd172821c">talloc_enable_leak_report_full</a> (void)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable full leak report when a program exits.  <a href="#gab01ab00014902d25e9eaba9fd172821c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__debug.html#ga37273c95255f727c2e50be93ffe8d90d">talloc_set_abort_fn</a> (void(*abort_fn)(const char *reason))</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set a custom "abort" function that is called on serious error.  <a href="#ga37273c95255f727c2e50be93ffe8d90d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__debug.html#ga5694661cc56931d6edfd926043e43cce">talloc_set_log_fn</a> (void(*log_fn)(const char *message))</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set a logging function.  <a href="#ga5694661cc56931d6edfd926043e43cce"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__debug.html#ga28b5f73a0dc144abc1c4a231d2d2842f">talloc_set_log_stderr</a> (void)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set stderr as the output for logs.  <a href="#ga28b5f73a0dc144abc1c4a231d2d2842f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__debug.html#ga28e83930f76844782e500a6041a2d452">talloc_set_memlimit</a> (const void *ctx, size_t max_size)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set a max memory limit for the current context hierarchy This affects all children of this context and constrain any allocation in the hierarchy to never exceed the limit set.  <a href="#ga28e83930f76844782e500a6041a2d452"></a><br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>To aid memory debugging, talloc contains routines to inspect the currently allocated memory hierarchy. </p>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga2d7d9d0b7c8ca726c537080f20de97e1"></a><!-- doxytag: member="talloc.h::talloc_disable_null_tracking" ref="ga2d7d9d0b7c8ca726c537080f20de97e1" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void talloc_disable_null_tracking </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Disable tracking of the NULL memory context. </p>
<p>This disables tracking of the NULL memory context. </p>

</div>
</div>
<a class="anchor" id="gac6f0c065b4ed391acb5c74240a8647bc"></a><!-- doxytag: member="talloc.h::talloc_enable_leak_report" ref="gac6f0c065b4ed391acb5c74240a8647bc" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void talloc_enable_leak_report </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable leak report when a program exits. </p>
<p>This enables calling of talloc_report(NULL, stderr) when the program exits. In Samba4 this is enabled by using the --leak-report command line option.</p>
<p>For it to be useful, this function must be called before any other talloc function as it establishes a "null context" that acts as the top of the tree. If you don't call this function first then passing NULL to <a class="el" href="group__talloc__debug.html#ga4f4ff95ce5a95f61cc453fc943e3de65" title="Print a summary report of all memory used by ptr.">talloc_report()</a> or <a class="el" href="group__talloc__debug.html#ga66136eb6105416bfcbd390ce6a4fc89c" title="Print a summary report of all memory used by ptr.">talloc_report_full()</a> won't give you the full tree printout.</p>
<p>Here is a typical talloc report:</p>
<div class="fragment"><pre class="fragment"> <a class="code" href="group__talloc.html#ga69f0cbf5b2aed849a5b826f42e218bfa" title="Create a new talloc context.">talloc</a> report on <span class="stringliteral">&#39;null_context&#39;</span> (total 267 bytes in 15 blocks)
      libcli/auth/spnego_parse.c:55  contains     31 bytes in   2 blocks
      libcli/auth/spnego_parse.c:55  contains     31 bytes in   2 blocks
      iconv(UTF8,CP850)              contains     42 bytes in   2 blocks
      libcli/auth/spnego_parse.c:55  contains     31 bytes in   2 blocks
      iconv(CP850,UTF8)              contains     42 bytes in   2 blocks
      iconv(UTF8,UTF-16LE)           contains     45 bytes in   2 blocks
      iconv(UTF-16LE,UTF8)           contains     45 bytes in   2 blocks
</pre></div> 
</div>
</div>
<a class="anchor" id="gab01ab00014902d25e9eaba9fd172821c"></a><!-- doxytag: member="talloc.h::talloc_enable_leak_report_full" ref="gab01ab00014902d25e9eaba9fd172821c" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void talloc_enable_leak_report_full </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable full leak report when a program exits. </p>
<p>This enables calling of talloc_report_full(NULL, stderr) when the program exits. In Samba4 this is enabled by using the --leak-report-full command line option.</p>
<p>For it to be useful, this function must be called before any other talloc function as it establishes a "null context" that acts as the top of the tree. If you don't call this function first then passing NULL to <a class="el" href="group__talloc__debug.html#ga4f4ff95ce5a95f61cc453fc943e3de65" title="Print a summary report of all memory used by ptr.">talloc_report()</a> or <a class="el" href="group__talloc__debug.html#ga66136eb6105416bfcbd390ce6a4fc89c" title="Print a summary report of all memory used by ptr.">talloc_report_full()</a> won't give you the full tree printout.</p>
<p>Here is a typical full report:</p>
<div class="fragment"><pre class="fragment"> full <a class="code" href="group__talloc.html#ga69f0cbf5b2aed849a5b826f42e218bfa" title="Create a new talloc context.">talloc</a> report on <span class="stringliteral">&#39;root&#39;</span> (total 18 bytes in 8 blocks)
      p1                             contains     18 bytes in   7 blocks (ref 0)
      r1                             contains     13 bytes in   2 blocks (ref 0)
      reference to: p2
      p2                             contains      1 bytes in   1 blocks (ref 1)
      x3                             contains      1 bytes in   1 blocks (ref 0)
      x2                             contains      1 bytes in   1 blocks (ref 0)
      x1                             contains      1 bytes in   1 blocks (ref 0)
</pre></div> 
</div>
</div>
<a class="anchor" id="gad50534c2b22274a94c722f0790ae102f"></a><!-- doxytag: member="talloc.h::talloc_enable_null_tracking" ref="gad50534c2b22274a94c722f0790ae102f" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void talloc_enable_null_tracking </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable tracking the use of NULL memory contexts. </p>
<p>This enables tracking of the NULL memory context without enabling leak reporting on exit. Useful for when you want to do your own leak reporting call via talloc_report_null_full(); </p>

</div>
</div>
<a class="anchor" id="gabd90af3895fee1960e90590fabe92a99"></a><!-- doxytag: member="talloc.h::talloc_enable_null_tracking_no_autofree" ref="gabd90af3895fee1960e90590fabe92a99" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void talloc_enable_null_tracking_no_autofree </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable tracking the use of NULL memory contexts. </p>
<p>This enables tracking of the NULL memory context without enabling leak reporting on exit. Useful for when you want to do your own leak reporting call via talloc_report_null_full(); </p>

</div>
</div>
<a class="anchor" id="ga4f4ff95ce5a95f61cc453fc943e3de65"></a><!-- doxytag: member="talloc.h::talloc_report" ref="ga4f4ff95ce5a95f61cc453fc943e3de65" args="(const void *ptr, FILE *f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void talloc_report </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&nbsp;</td>
          <td class="paramname"> <em>f</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Print a summary report of all memory used by ptr. </p>
<p>This function prints a summary report of all memory used by ptr. One line of report is printed for each immediate child of ptr, showing the total memory and number of blocks used by that child.</p>
<p>You can pass NULL for the pointer, in which case a report is printed for the top level memory context, but only if <a class="el" href="group__talloc__debug.html#gac6f0c065b4ed391acb5c74240a8647bc" title="Enable leak report when a program exits.">talloc_enable_leak_report()</a> or <a class="el" href="group__talloc__debug.html#gab01ab00014902d25e9eaba9fd172821c" title="Enable full leak report when a program exits.">talloc_enable_leak_report_full()</a> has been called.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ptr</em>&nbsp;</td><td>The talloc chunk.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>f</em>&nbsp;</td><td>The file handle to print to.</td></tr>
  </table>
  </dd>
</dl>
<p>Example: </p>
<div class="fragment"><pre class="fragment">      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *a, *b;
      a = <a class="code" href="group__talloc.html#ga69f0cbf5b2aed849a5b826f42e218bfa" title="Create a new talloc context.">talloc</a>(NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
      b = <a class="code" href="group__talloc.html#ga69f0cbf5b2aed849a5b826f42e218bfa" title="Create a new talloc context.">talloc</a>(a, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
      fprintf(stderr, <span class="stringliteral">&quot;Summary of memory tree for a:\n&quot;</span>);
      <a class="code" href="group__talloc__debug.html#ga4f4ff95ce5a95f61cc453fc943e3de65" title="Print a summary report of all memory used by ptr.">talloc_report</a>(a, stderr);
</pre></div><dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__talloc__debug.html#ga66136eb6105416bfcbd390ce6a4fc89c" title="Print a summary report of all memory used by ptr.">talloc_report_full()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga62dc4c6ec8c0a233b508f91d8fb54e69"></a><!-- doxytag: member="talloc.h::talloc_report_depth_cb" ref="ga62dc4c6ec8c0a233b508f91d8fb54e69" args="(const void *ptr, int depth, int max_depth, void(*callback)(const void *ptr, int depth, int max_depth, int is_ref, void *private_data), void *private_data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void talloc_report_depth_cb </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>max_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void(*)(const void *ptr, int depth, int max_depth, int is_ref, void *private_data)&nbsp;</td>
          <td class="paramname"> <em>callback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>private_data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Walk a complete talloc hierarchy. </p>
<p>This provides a more flexible reports than <a class="el" href="group__talloc__debug.html#ga4f4ff95ce5a95f61cc453fc943e3de65" title="Print a summary report of all memory used by ptr.">talloc_report()</a>. It will recursively call the callback for the entire tree of memory referenced by the pointer. References in the tree are passed with is_ref = 1 and the pointer that is referenced.</p>
<p>You can pass NULL for the pointer, in which case a report is printed for the top level memory context, but only if <a class="el" href="group__talloc__debug.html#gac6f0c065b4ed391acb5c74240a8647bc" title="Enable leak report when a program exits.">talloc_enable_leak_report()</a> or <a class="el" href="group__talloc__debug.html#gab01ab00014902d25e9eaba9fd172821c" title="Enable full leak report when a program exits.">talloc_enable_leak_report_full()</a> has been called.</p>
<p>The recursion is stopped when depth &gt;= max_depth. max_depth = -1 means only stop at leaf nodes.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ptr</em>&nbsp;</td><td>The talloc chunk.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>depth</em>&nbsp;</td><td>Internal parameter to control recursion. Call with 0.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>max_depth</em>&nbsp;</td><td>Maximum recursion level.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>callback</em>&nbsp;</td><td>Function to be called on every chunk.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>private_data</em>&nbsp;</td><td>Private pointer passed to callback. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga13062669ca8e4b787911c206e339f61c"></a><!-- doxytag: member="talloc.h::talloc_report_depth_file" ref="ga13062669ca8e4b787911c206e339f61c" args="(const void *ptr, int depth, int max_depth, FILE *f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void talloc_report_depth_file </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>max_depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&nbsp;</td>
          <td class="paramname"> <em>f</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Print a talloc hierarchy. </p>
<p>This provides a more flexible reports than <a class="el" href="group__talloc__debug.html#ga4f4ff95ce5a95f61cc453fc943e3de65" title="Print a summary report of all memory used by ptr.">talloc_report()</a>. It will let you specify the depth and max_depth.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ptr</em>&nbsp;</td><td>The talloc chunk.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>depth</em>&nbsp;</td><td>Internal parameter to control recursion. Call with 0.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>max_depth</em>&nbsp;</td><td>Maximum recursion level.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>f</em>&nbsp;</td><td>The file handle to print to. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga66136eb6105416bfcbd390ce6a4fc89c"></a><!-- doxytag: member="talloc.h::talloc_report_full" ref="ga66136eb6105416bfcbd390ce6a4fc89c" args="(const void *ptr, FILE *f)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void talloc_report_full </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>ptr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">FILE *&nbsp;</td>
          <td class="paramname"> <em>f</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Print a summary report of all memory used by ptr. </p>
<p>This provides a more detailed report than <a class="el" href="group__talloc__debug.html#ga4f4ff95ce5a95f61cc453fc943e3de65" title="Print a summary report of all memory used by ptr.">talloc_report()</a>. It will recursively print the entire tree of memory referenced by the pointer. References in the tree are shown by giving the name of the pointer that is referenced.</p>
<p>You can pass NULL for the pointer, in which case a report is printed for the top level memory context, but only if <a class="el" href="group__talloc__debug.html#gac6f0c065b4ed391acb5c74240a8647bc" title="Enable leak report when a program exits.">talloc_enable_leak_report()</a> or <a class="el" href="group__talloc__debug.html#gab01ab00014902d25e9eaba9fd172821c" title="Enable full leak report when a program exits.">talloc_enable_leak_report_full()</a> has been called.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ptr</em>&nbsp;</td><td>The talloc chunk.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>f</em>&nbsp;</td><td>The file handle to print to.</td></tr>
  </table>
  </dd>
</dl>
<p>Example: </p>
<div class="fragment"><pre class="fragment">      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> *a, *b;
      a = <a class="code" href="group__talloc.html#ga69f0cbf5b2aed849a5b826f42e218bfa" title="Create a new talloc context.">talloc</a>(NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
      b = <a class="code" href="group__talloc.html#ga69f0cbf5b2aed849a5b826f42e218bfa" title="Create a new talloc context.">talloc</a>(a, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>);
      fprintf(stderr, <span class="stringliteral">&quot;Dumping memory tree for a:\n&quot;</span>);
      <a class="code" href="group__talloc__debug.html#ga66136eb6105416bfcbd390ce6a4fc89c" title="Print a summary report of all memory used by ptr.">talloc_report_full</a>(a, stderr);
</pre></div><dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__talloc__debug.html#ga4f4ff95ce5a95f61cc453fc943e3de65" title="Print a summary report of all memory used by ptr.">talloc_report()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga37273c95255f727c2e50be93ffe8d90d"></a><!-- doxytag: member="talloc.h::talloc_set_abort_fn" ref="ga37273c95255f727c2e50be93ffe8d90d" args="(void(*abort_fn)(const char *reason))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void talloc_set_abort_fn </td>
          <td>(</td>
          <td class="paramtype">void(*)(const char *reason)&nbsp;</td>
          <td class="paramname"> <em>abort_fn</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set a custom "abort" function that is called on serious error. </p>
<p>The default "abort" function is <code>abort()</code>.</p>
<p>The "abort" function is called when:</p>
<ul>
<li>
<a class="el" href="group__talloc.html#gaa12adf71d94abc4e1d80fb951808e374" title="Safely turn a void pointer into a typed pointer.">talloc_get_type_abort()</a> fails </li>
<li>
the provided pointer is not a valid talloc context </li>
<li>
when the context meta data are invalid </li>
<li>
when access after free is detected </li>
</ul>
<p>Example:</p>
<div class="fragment"><pre class="fragment"> <span class="keywordtype">void</span> my_abort(<span class="keyword">const</span> <span class="keywordtype">char</span> *reason)
 {
      fprintf(stderr, <span class="stringliteral">&quot;talloc abort: %s\n&quot;</span>, reason);
      abort();
 }

      <a class="code" href="group__talloc__debug.html#ga37273c95255f727c2e50be93ffe8d90d" title="Set a custom &amp;quot;abort&amp;quot; function that is called on serious error.">talloc_set_abort_fn</a>(my_abort);
</pre></div><dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>abort_fn</em>&nbsp;</td><td>The new "abort" function.</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__talloc__debug.html#ga5694661cc56931d6edfd926043e43cce" title="Set a logging function.">talloc_set_log_fn()</a> </dd>
<dd>
<a class="el" href="group__talloc.html#ga1ee43e9ef59fc4edfce9a12b9cc54a63" title="Get a typed pointer out of a talloc pointer.">talloc_get_type()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga5694661cc56931d6edfd926043e43cce"></a><!-- doxytag: member="talloc.h::talloc_set_log_fn" ref="ga5694661cc56931d6edfd926043e43cce" args="(void(*log_fn)(const char *message))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void talloc_set_log_fn </td>
          <td>(</td>
          <td class="paramtype">void(*)(const char *message)&nbsp;</td>
          <td class="paramname"> <em>log_fn</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set a logging function. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>log_fn</em>&nbsp;</td><td>The logging function.</td></tr>
  </table>
  </dd>
</dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__talloc__debug.html#ga28b5f73a0dc144abc1c4a231d2d2842f" title="Set stderr as the output for logs.">talloc_set_log_stderr()</a> </dd>
<dd>
<a class="el" href="group__talloc__debug.html#ga37273c95255f727c2e50be93ffe8d90d" title="Set a custom &quot;abort&quot; function that is called on serious error.">talloc_set_abort_fn()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga28b5f73a0dc144abc1c4a231d2d2842f"></a><!-- doxytag: member="talloc.h::talloc_set_log_stderr" ref="ga28b5f73a0dc144abc1c4a231d2d2842f" args="(void)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void talloc_set_log_stderr </td>
          <td>(</td>
          <td class="paramtype">void&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set stderr as the output for logs. </p>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__talloc__debug.html#ga5694661cc56931d6edfd926043e43cce" title="Set a logging function.">talloc_set_log_fn()</a> </dd>
<dd>
<a class="el" href="group__talloc__debug.html#ga37273c95255f727c2e50be93ffe8d90d" title="Set a custom &quot;abort&quot; function that is called on serious error.">talloc_set_abort_fn()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga28e83930f76844782e500a6041a2d452"></a><!-- doxytag: member="talloc.h::talloc_set_memlimit" ref="ga28e83930f76844782e500a6041a2d452" args="(const void *ctx, size_t max_size)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int talloc_set_memlimit </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>ctx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"> <em>max_size</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set a max memory limit for the current context hierarchy This affects all children of this context and constrain any allocation in the hierarchy to never exceed the limit set. </p>
<p>The limit can be removed by setting 0 (unlimited) as the max_size by calling the funciton again on the sam context. Memory limits can also be nested, meaning a hild can have a stricter memory limit than a parent. Memory limits are enforced only at memory allocation time. Stealing a context into a 'limited' hierarchy properly updates memory usage but does *not* cause failure if the move causes the new parent to exceed its limits. However any further allocation on that hierarchy will then fail.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ctx</em>&nbsp;</td><td>The talloc context to set the limit on </td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>max_size</em>&nbsp;</td><td>The (new) max_size </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div>
<hr class="footer"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.3 </small></address>
</body>
</html>
