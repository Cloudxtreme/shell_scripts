<!doctype html>
<html class="no-js" lang="en">
<head>
  <meta charset="utf-8">
  <title>lldpd 0.7.1 | Vincent Bernat</title>
  <meta name="keywords" content="lldpd, lldp, netbsd, openbsd, freebsd, 802.1ab, netlink, autotools, c99, libevent, serialization, readline, upstart, systemd">
  <meta name="author" content="Vincent Bernat">
  <meta name="viewport" content="width=device-width,initial-scale=1.0">
  <link rel="apple-touch-icon-precomposed" href="//d1g3mdmxf8zbo9.cloudfront.net/images/l/apple-touch-icon.png">
  <link rel="canonical" href="http://vincent.bernat.im/en/blog/2013-lldpd-0.7.1.html">
  <link rel="alternate" href="/en/blog/atom.xml" type="application/atom+xml" title="ATOM feed">
  <link rel='stylesheet' href='http://fonts.googleapis.com/css?family=Inconsolata|Source+Sans+Pro:700|Merriweather:400,400italic' type='text/css'>
  <link rel="stylesheet" href="//d1g3mdmxf8zbo9.cloudfront.net/css/luffy.70339b22.css" type="text/css">
  <script src="//d1g3mdmxf8zbo9.cloudfront.net/js/mp.154ca7f0.js"></script>
</head>
<body class="lf-article">

    <nav id="lf-navbar">
    <div id="lf-homeicon">
      <a class="lf-sprite-strawhat" rel="author"
	 href="/en/"></a>
    </div>
    <div id="lf-menubar">
      <form id="lf-search" action="//www.google.com/search">
	<i id="lf-search-glass"><input type="submit" class="lf-sprite-search" value=""></i>
	<input type="hidden" name="hl" value="en">
	<input type="hidden" name="q"  value="site:vincent.bernat.im/en/*">
	<input id="lf-search-query" type="text" name="q"
	       placeholder="Search" value="">
      </form>
      <ul>
    <li>
    <a href="/en/cv.html">
      Résumé
    </a>
  </li>
    <li>
    <a href="/en/projects.html">
      Projects
    </a>
  </li>
    <li class="active">
    <a href="/en/blog">
      Blog
    </a>
  </li>
  </ul>    </div>
  </nav>
  <div id="lf-search-results">
    <div id="lf-search-results-results"></div>
    <span id="lf-search-results-close"
	  class="lf-sprite-slimbox-close"></span>
  </div>

  <nav id="lf-links">
      <div class="lf-link">
    <a href="#" class="lf-sprite-flag lf-link-icon"
       title="Other languages"></a>
    <div class="lf-link-details"><div class="lf-link-inner">
      <i class="lf-sprite-arrow-left"></i>
      <p>Other languages</p>
      <ul>
		<li><a href="/fr/blog/2013-lldpd-0.7.1.html">
	    Français
	</a></li>
	      </ul>
    </div></div>
  </div>
            <div class="lf-link lf-not-important">
    <a href="#" class="lf-sprite-tag lf-link-icon"
       title="Attachments"></a>
    <div class="lf-link-details"><div class="lf-link-inner">
      <i class="lf-sprite-arrow-left"></i>
      <p>Tags</p>
      <ul>
		<li>
	  <a href="/en/blog#tag-network">
	    Networking
	</a></li>
	      </ul>
    </div></div>
  </div>
      <div class="lf-link lf-not-important">
    <a href="#" class="lf-sprite-share lf-link-icon"
       title="Share"></a>
    <div class="lf-link-details"><div class="lf-link-inner">
      <i class="lf-sprite-arrow-left"></i>
      <p>Share</p>
      <ul>
		<li><a href="https://twitter.com/share?url=http%3A//vincent.bernat.im/en/blog/2013-lldpd-0.7.1.html">Twitter</a></li>
	<li><a href="https://plus.google.com/share?url=http%3A//vincent.bernat.im/en/blog/2013-lldpd-0.7.1.html">Google+</a></li>
	<li><a href="http://www.facebook.com/sharer.php?u=http%3A//vincent.bernat.im/en/blog/2013-lldpd-0.7.1.html">Facebook</a></li>
	<li><a href="http://www.reddit.com/submit?url=http%3A//vincent.bernat.im/en/blog/2013-lldpd-0.7.1.html">reddit</a></li>
	<li><a href="http://news.ycombinator.com/submitlink?u=http%3A//vincent.bernat.im/en/blog/2013-lldpd-0.7.1.html">Hacker News</a></li>
      </ul>
    </div></div>
  </div>
</nav>
  
    <div id="lf-pages">
    <div id="lf-page-1"></div>
    <div id="lf-page-2"></div>
    <div id="lf-page">
      <article>
		<header>
	  <h1>lldpd 0.7.1</h1>
	  	  <h2>Vincent Bernat</h2>
	  	  	  <time class="timeago"
      datetime="2013-02-20T09:28:19+01:00"
      pubdate>
  <abbr class="published updated" title="2013-02-20T09:28:19+01:00">February 20, 2013</abbr>
</time>

	</header>
			<div id="lf-main" role="main">
	  <p>A few weeks ago, a new version of <a href="http://vincentbernat.github.com/lldpd" title="lldpd, an implementation of 802.1AB">lldpd</a>, a 802.<span class="caps">1AB</span> (aka <abbr title="Link Layer Discovery Protocol"><span class="caps">LLDP</span></abbr>)
implementation for various Unices, has been&nbsp;released.</p>
<p><a href="http://en.wikipedia.org/wiki/Link_Layer_Discovery_Protocol" title="Link Layer Discovery Protocol"><abbr title="Link Layer Discovery Protocol"><abbr title="Link Layer Discovery Protocol"><span class="caps">LLDP</span></abbr></abbr></a> is an industry standard protocol designed to supplant
proprietary Link-Layer protocols such as <span class="caps">EDP</span> or <span class="caps">CDP</span>. The goal of <abbr title="Link Layer Discovery Protocol"><span class="caps">LLDP</span></abbr>
is to provide an inter-vendor compatible mechanism to deliver
Link-Layer notifications to adjacent network&nbsp;devices.</p>
<p>In short, <abbr title="Link Layer Discovery Protocol"><span class="caps">LLDP</span></abbr> allows you to know exactly on which port is a server
(and reciprocally). To illustrate its use, I have made a <a href="http://xkcd.com" title="xkcd">xkcd</a>-like&nbsp;strip:</p>
<p><img height="208" width="700" alt="xkcd-like strip for the use of LLDP" src="//d1g3mdmxf8zbo9.cloudfront.net/images/why-lldp.png" title="Why use LLDP?"></p>
<p>If you would like more information about <em>lldpd</em>, please have a look
at <a href="http://vincentbernat.github.com/lldpd" title="lldpd, an implementation of 802.1AB">its new dedicated website</a>. This blog post is an insight of
various <strong>technical changes</strong> that have affected <em>lldpd</em> since its
latest major release one year ago. Lots of C stuff&nbsp;ahead!</p>
<div class="toc">
<ul>
<li><a href="#version-changelog">Version <span class="amp">&amp;</span> changelog</a><ul>
<li><a href="#automated-version">Automated version</a></li>
<li><a href="#automated-changelog">Automated changelog</a></li>
</ul>
</li>
<li><a href="#core">Core</a><ul>
<li><a href="#c99">C99</a></li>
<li><a href="#logging">Logging</a></li>
<li><a href="#libevent">libevent</a></li>
</ul>
</li>
<li><a href="#client">Client</a><ul>
<li><a href="#serialization">Serialization</a></li>
<li><a href="#library">Library</a></li>
<li><a href="#cli"><span class="caps">CLI</span></a><ul>
<li><a href="#parsing-completion">Parsing <span class="amp">&amp;</span> completion</a></li>
<li><a href="#readline">Readline</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#os-specific-support"><span class="caps">OS</span> specific support</a><ul>
<li><a href="#netlink-on-linux">Netlink on Linux</a></li>
<li><a href="#bsd-support"><span class="caps">BSD</span> support</a></li>
<li><a href="#os-x-support"><span class="caps">OS</span> X support</a></li>
<li><a href="#upstart-and-systemd-support">Upstart and systemd support</a></li>
<li><a href="#os-include-files"><span class="caps">OS</span> include files</a></li>
</ul>
</li>
</ul>
</div>
<h1 id="version-changelog">Version <span class="amp">&amp;</span> changelog</h1>
<p><strong><span class="caps">UPDATED</span>:</strong> <a href="http://www.hadrons.org/~guillem/" title="Guillem Jover's Home Page">Guillem Jover</a> told me how he met the same goals for
<a href="http://libbsd.freedesktop.org/wiki/" title="libbsd">libbsd</a> :</p>
<ol>
<li>Save the version from git into <code>.dist-version</code> and use this file
    if it exists. This allows one to rebuild <code>./configure</code> from the
    published tarball without losing the version. This also handles
    <a href="https://www.mirbsd.org/permalinks/wlog-10_e20130220-tg.htm#e20130220-tg_wlog-10" title="GNU autotools generated files">Thorsten Glaser&#8217;s critic</a>.</li>
<li>Include <code>CHANGELOG</code> in <code>DISTCLEANFILES</code> variable.</li>
</ol>
<p>Since this is a better solution, I have <a href="https://github.com/vincentbernat/lldpd/commit/a888bea6f08687177330c2d95569864009e769d6" title="build: use the same way as libbsd for version and changelog">adopted</a> the appropriate
line of codes from <em>libbsd</em>. The two following sections are partly
technically&nbsp;outdated.</p>
<h2 id="automated-version">Automated version</h2>
<p>In <code>configure.ac</code>, I was previously using a static version number that
I had to increase when&nbsp;releasing:</p>
<div class="codehilite"><pre><span class="err">AC_INIT([lldpd], [0.5.7], [bernat@luffy.cx])</span>
</pre></div>


<p>Since the information is present in the git tree, this seems a bit
redundant (and easy to forget). Taking the version from the git tree
is&nbsp;easy:</p>
<div class="codehilite"><pre><span class="err">AC_INIT([lldpd],</span>
<span class="err">        [m4_esyscmd_s([git describe --tags --always --match [0-9]* 2&gt; /dev/null || date +%F])],</span>
<span class="err">        [bernat@luffy.cx])</span>
</pre></div>


<p>If the head of the git tree is tagged, you get the exact tag (<code>0.7.1</code>
for example). If it is not, you get the nearest one, the number of
commits since it and part of the current hash (<code>0.7.1-29-g2909519</code> for&nbsp;example).</p>
<p>The drawback of this approach is that if you rebuild <code>configure</code>
from the released tarball, you don&#8217;t have the git tree and the version
will be a date. Just don&#8217;t do&nbsp;that.</p>
<h2 id="automated-changelog">Automated changelog</h2>
<p>Generating the changelog from git is a common practice. I had some
difficulties to make it right. Here is my attempt (I am using
<code>automake</code>):</p>
<div class="codehilite"><pre><span class="nv">dist_doc_DATA</span> <span class="o">=</span> <span class="caps">README</span>.md <span class="caps">NEWS</span> ChangeLog

.<span class="caps">PHONY</span>: <span class="k">$(</span>distdir<span class="k">)</span>/ChangeLog
dist-hook: <span class="k">$(</span>distdir<span class="k">)</span>/ChangeLog
<span class="k">$(</span>distdir<span class="k">)</span>/ChangeLog:
        <span class="k">$(</span>AM_V_GEN<span class="k">)if </span><span class="nb">test</span> -d <span class="k">$(</span>top_srcdir<span class="k">)</span>/.git; <span class="k">then</span> <span class="se">\</span>
          <span class="nv">prev</span><span class="o">=</span><span class="nv">$$</span><span class="o">(</span>git describe --tags --always --match <span class="o">[</span>0-9<span class="o">]</span>* 2&gt; /dev/null<span class="o">)</span> ; <span class="se">\</span>
          <span class="k">for </span>tag in <span class="nv">$$</span><span class="o">(</span>git tag | grep -E <span class="s1">&#39;^[0-9]+(\.[0-9]+){1,}$$&#39;</span> | sort -rn<span class="o">)</span>; <span class="k">do</span> <span class="se">\</span>
            <span class="k">if</span> <span class="o">[</span> x<span class="s2">&quot;$$prev&quot;</span> <span class="o">=</span> x <span class="o">]</span>; <span class="k">then </span><span class="nv">prev</span><span class="o">=</span><span class="nv">$$</span>tag ; <span class="k">fi</span> ; <span class="se">\</span>
            <span class="k">if</span> <span class="o">[</span> x<span class="s2">&quot;$$prev&quot;</span> <span class="o">=</span> x<span class="s2">&quot;$$tag&quot;</span> <span class="o">]</span>; <span class="k">then continue</span>; <span class="k">fi</span> ; <span class="se">\</span>
            <span class="nb">echo</span> <span class="s2">&quot;$$prev [$$(git log $$prev -1 --pretty=format:&#39;%ai&#39;)]:&quot;</span> ; <span class="se">\</span>
            <span class="nb">echo</span> <span class="s2">&quot;&quot;</span> ; <span class="se">\</span>
            git log --pretty<span class="o">=</span><span class="s1">&#39; - [%h] %s (%an)&#39;</span> <span class="nv">$$</span>tag..<span class="nv">$$</span>prev ; <span class="se">\</span>
            <span class="nb">echo</span> <span class="s2">&quot;&quot;</span> ; <span class="se">\</span>
            <span class="nv">prev</span><span class="o">=</span><span class="nv">$$</span>tag ; <span class="se">\</span>
          <span class="k">done</span> &gt; <span class="nv">$@</span> ; <span class="se">\</span>
<span class="cp">        else \</span>
<span class="cp">          touch $@ ; \</span>
<span class="cp">        fi</span>
ChangeLog:
        touch <span class="nv">$@</span>
</pre></div>


<p>Changelog entries are grouped by version. Since it is a bit verbose, I
still maintain a <code>NEWS</code> file with important&nbsp;changes.</p>
<h1 id="core">Core</h1>
<h2 id="c99">C99</h2>
<p>I have recently read <a href="http://oreilly.com/shop/product/0636920025108.html?bB=g" title="21st Century C book on O'Reilly">21st Century C</a> which has some good bits and
also handles the ecosystem around C. I have definitively adopted
<a href="http://gcc.gnu.org/onlinedocs/gcc/Designated-Inits.html" title="Designated initializers in GCC documentation">designated initializers</a> in my coding style. Being a <span class="caps">GCC</span> extension
since a long time, this is not a major compatibility&nbsp;problem.</p>
<p>Without designated&nbsp;initializers:</p>
<div class="codehilite"><pre><span class="k">struct</span> <span class="n">netlink_req</span> <span class="n">req</span><span class="p">;</span>
<span class="k">struct</span> <span class="n">iovec</span> <span class="n">iov</span><span class="p">;</span>
<span class="k">struct</span> <span class="n">sockaddr_nl</span> <span class="n">peer</span><span class="p">;</span>
<span class="k">struct</span> <span class="n">msghdr</span> <span class="n">rtnl_msg</span><span class="p">;</span>

<span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">req</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">req</span><span class="p">));</span>
<span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">iov</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">iov</span><span class="p">));</span>
<span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">peer</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">peer</span><span class="p">));</span>
<span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rtnl_msg</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">rtnl_msg</span><span class="p">));</span>

<span class="n">req</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">nlmsg_len</span> <span class="o">=</span> <span class="n">NLMSG_LENGTH</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">rtgenmsg</span><span class="p">));</span>
<span class="n">req</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">nlmsg_type</span> <span class="o">=</span> <span class="n">RTM_GETLINK</span><span class="p">;</span>
<span class="n">req</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">nlmsg_flags</span> <span class="o">=</span> <span class="n">NLM_F_REQUEST</span> <span class="o">|</span> <span class="n">NLM_F_DUMP</span><span class="p">;</span>
<span class="n">req</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">nlmsg_seq</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="n">req</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">nlmsg_pid</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">();</span>
<span class="n">req</span><span class="p">.</span><span class="n">gen</span><span class="p">.</span><span class="n">rtgen_family</span> <span class="o">=</span> <span class="n">AF_PACKET</span><span class="p">;</span>
<span class="n">iov</span><span class="p">.</span><span class="n">iov_base</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">req</span><span class="p">;</span>
<span class="n">iov</span><span class="p">.</span><span class="n">iov_len</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">nlmsg_len</span><span class="p">;</span>
<span class="n">peer</span><span class="p">.</span><span class="n">nl_family</span> <span class="o">=</span> <span class="n">AF_NETLINK</span><span class="p">;</span>
<span class="n">rtnl_msg</span><span class="p">.</span><span class="n">msg_iov</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">iov</span><span class="p">;</span>
<span class="n">rtnl_msg</span><span class="p">.</span><span class="n">msg_iovlen</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="n">rtnl_msg</span><span class="p">.</span><span class="n">msg_name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">peer</span><span class="p">;</span>
<span class="n">rtnl_msg</span><span class="p">.</span><span class="n">msg_namelen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_nl</span><span class="p">);</span>
</pre></div>


<p>With designated&nbsp;initializers:</p>
<div class="codehilite"><pre><span class="k">struct</span> <span class="n">netlink_req</span> <span class="n">req</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">hdr</span> <span class="o">=</span> <span class="p">{</span>
        <span class="p">.</span><span class="n">nlmsg_len</span> <span class="o">=</span> <span class="n">NLMSG_LENGTH</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">rtgenmsg</span><span class="p">)),</span>
        <span class="p">.</span><span class="n">nlmsg_type</span> <span class="o">=</span> <span class="n">RTM_GETLINK</span><span class="p">,</span>
        <span class="p">.</span><span class="n">nlmsg_flags</span> <span class="o">=</span> <span class="n">NLM_F_REQUEST</span> <span class="o">|</span> <span class="n">NLM_F_DUMP</span><span class="p">,</span>
        <span class="p">.</span><span class="n">nlmsg_seq</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
        <span class="p">.</span><span class="n">nlmsg_pid</span> <span class="o">=</span> <span class="n">getpid</span><span class="p">()</span> <span class="p">},</span>
    <span class="p">.</span><span class="n">gen</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">rtgen_family</span> <span class="o">=</span> <span class="n">AF_PACKET</span> <span class="p">}</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="n">iovec</span> <span class="n">iov</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">iov_base</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">req</span><span class="p">,</span>
    <span class="p">.</span><span class="n">iov_len</span> <span class="o">=</span> <span class="n">req</span><span class="p">.</span><span class="n">hdr</span><span class="p">.</span><span class="n">nlmsg_len</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="n">sockaddr_nl</span> <span class="n">peer</span> <span class="o">=</span> <span class="p">{</span> <span class="p">.</span><span class="n">nl_family</span> <span class="o">=</span> <span class="n">AF_NETLINK</span> <span class="p">};</span>
<span class="k">struct</span> <span class="n">msghdr</span> <span class="n">rtnl_msg</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">.</span><span class="n">msg_iov</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">iov</span><span class="p">,</span>
    <span class="p">.</span><span class="n">msg_iovlen</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
    <span class="p">.</span><span class="n">msg_name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">peer</span><span class="p">,</span>
    <span class="p">.</span><span class="n">msg_namelen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr_nl</span><span class="p">)</span>
<span class="p">};</span>
</pre></div>


<h2 id="logging">Logging</h2>
<p>Logging in <em>lldpd</em> was not extensive. Usually, when receiving a bug
report, I asked the reporter to add some additional <code>printf()</code> calls
to determine where the problem was. This was clearly
suboptimal. Therefore, I have added many <code>log_debug()</code> calls with the
ability to filter out some of them. For example, to debug interface
discovery, one can run <em>lldpd</em> with <code>lldpd -ddd -D interface</code>.</p>
<p>Moreover, I have added colors when logging to a terminal. This may
seem pointless but it is now far easier to spot warning messages from
debug&nbsp;ones.</p>
<p><img height="250" width="606" alt="logging output of lldpd" src="//d1g3mdmxf8zbo9.cloudfront.net/images/lldpd-logging.png" title="Example of colored logging output for lldpd"></p>
<h2 id="libevent">libevent</h2>
<p>In <em>lldpd</em> 0.5.7, I was using my own <code>select()</code>-based event loop. It
worked but I didn&#8217;t want to grow a full-featured event loop inside
<em>lldpd</em>. Therefore, I switched to <a href="http://libevent.org/" title="libevent, an event notification library">libevent</a>.</p>
<p>The minimal required version of <em>libevent</em> is 2.0.5. A convenient way
to check the changes in <abbr title="Application Programming Interface"><span class="caps">API</span></abbr> is to use <a href="http://upstream-tracker.org/versions/libevent.html" title="API compatibility report for libevent library">Upstream Tracker</a>, a website
tracking <abbr title="Application Programming Interface"><span class="caps">API</span></abbr> and <span class="caps">ABI</span> changes for various libraries. This version of
<em>libevent</em> is not available in many stable distributions. For example,
Debian Squeeze or Ubuntu Lucid only have
1.4.13. I am also trying to keep compatibility with very old
distributions, like <span class="caps">RHEL</span> 2, which does not have a packaged <em>libevent</em>
at&nbsp;all.</p>
<p>For some users, it may be a burden to compile additional
libraries. Therefore, I have included <em>libevent</em> source code in
<em>lldpd</em> source tree (as a git submodule) and I am only using it if no
suitable system <em>libevent</em> is&nbsp;available.</p>
<p>Have a look at <a href="https://github.com/vincentbernat/lldpd/blob/4c1a8c6152215b9c1320e04f6c811404f27f53c8/m4/libevent.m4"><code>m4/libevent.m4</code></a> and
<a href="https://github.com/vincentbernat/lldpd/blob/0.7.1/src/daemon/Makefile.am"><code>src/daemon/Makefile.am</code></a> to see how this is&nbsp;done.</p>
<h1 id="client">Client</h1>
<h2 id="serialization">Serialization</h2>
<p><code>lldpctl</code> is a client querying <code>lldpd</code> to display discovered
neighbors. The communication is done through an Unix socket. Each
structure to be serialized over this socket should be described with a
string. For&nbsp;example:</p>
<div class="codehilite"><pre><span class="cp">#define STRUCT_LLDPD_DOT3_MACPHY &quot;(bbww)&quot;</span>
<span class="k">struct</span> <span class="n">lldpd_dot3_macphy</span> <span class="p">{</span>
        <span class="n">u_int8_t</span>                 <span class="n">autoneg_support</span><span class="p">;</span>
        <span class="n">u_int8_t</span>                 <span class="n">autoneg_enabled</span><span class="p">;</span>
        <span class="n">u_int16_t</span>                <span class="n">autoneg_advertised</span><span class="p">;</span>
        <span class="n">u_int16_t</span>                <span class="n">mau_type</span><span class="p">;</span>
<span class="p">};</span>
</pre></div>


<p>I did not want to use stuff like <a href="http://code.google.com/p/protobuf/" title="Protocol Buffers - Google data interchange format">Protocol Buffers</a> because I didn&#8217;t
want to copy the existing structures to other structures before
serialization (and the other way after&nbsp;deserialization).</p>
<p>However, the serializer in <em>lldpd</em> did not allow to handle reference
to other structures, lists or circular references. I have written
another one which works by annotating a structure with some&nbsp;macros:</p>
<div class="codehilite"><pre><span class="k">struct</span> <span class="n">lldpd_chassis</span> <span class="p">{</span>
    <span class="n">TAILQ_ENTRY</span><span class="p">(</span><span class="n">lldpd_chassis</span><span class="p">)</span> <span class="n">c_entries</span><span class="p">;</span>
    <span class="n">u_int16_t</span>        <span class="n">c_index</span><span class="p">;</span>
    <span class="n">u_int8_t</span>         <span class="n">c_protocol</span><span class="p">;</span>
    <span class="n">u_int8_t</span>         <span class="n">c_id_subtype</span><span class="p">;</span>
    <span class="kt">char</span>            <span class="o">*</span><span class="n">c_id</span><span class="p">;</span>
    <span class="kt">int</span>              <span class="n">c_id_len</span><span class="p">;</span>
    <span class="kt">char</span>            <span class="o">*</span><span class="n">c_name</span><span class="p">;</span>
    <span class="kt">char</span>            <span class="o">*</span><span class="n">c_descr</span><span class="p">;</span>

    <span class="n">u_int16_t</span>        <span class="n">c_cap_available</span><span class="p">;</span>
    <span class="n">u_int16_t</span>        <span class="n">c_cap_enabled</span><span class="p">;</span>

    <span class="n">u_int16_t</span>        <span class="n">c_ttl</span><span class="p">;</span>

    <span class="n">TAILQ_HEAD</span><span class="p">(,</span> <span class="n">lldpd_mgmt</span><span class="p">)</span> <span class="n">c_mgmt</span><span class="p">;</span>
<span class="p">};</span>
<span class="n">MARSHAL_BEGIN</span><span class="p">(</span><span class="n">lldpd_chassis</span><span class="p">)</span>
<span class="n">MARSHAL_TQE</span>  <span class="p">(</span><span class="n">lldpd_chassis</span><span class="p">,</span> <span class="n">c_entries</span><span class="p">)</span>
<span class="n">MARSHAL_FSTR</span> <span class="p">(</span><span class="n">lldpd_chassis</span><span class="p">,</span> <span class="n">c_id</span><span class="p">,</span> <span class="n">c_id_len</span><span class="p">)</span>
<span class="n">MARSHAL_STR</span>  <span class="p">(</span><span class="n">lldpd_chassis</span><span class="p">,</span> <span class="n">c_name</span><span class="p">)</span>
<span class="n">MARSHAL_STR</span>  <span class="p">(</span><span class="n">lldpd_chassis</span><span class="p">,</span> <span class="n">c_descr</span><span class="p">)</span>
<span class="n">MARSHAL_SUBTQ</span><span class="p">(</span><span class="n">lldpd_chassis</span><span class="p">,</span> <span class="n">lldpd_mgmt</span><span class="p">,</span> <span class="n">c_mgmt</span><span class="p">)</span>
<span class="n">MARSHAL_END</span><span class="p">;</span>
</pre></div>


<p>Only pointers need to be annotated. The remaining of the structure can
be serialized with just <code>memcpy()</code><sup id="fnref:uint16t"><a href="#fn:uint16t" rel="footnote">1</a></sup>. I think there is still
room for improvement. It should be possible to add annotations inside
the structure and avoid some duplication. Or maybe, using a
<a href="https://bitbucket.org/eliben/pycparser" title="pycparser, a parser for C language written in pure Python">C parser</a>? Or using the <span class="caps">AST</span> output from&nbsp;<span class="caps">LLVM</span>?</p>
<h2 id="library">Library</h2>
<p>In <em>lldpd</em> 0.5.7, there are two possible entry points to interact
with the&nbsp;daemon:</p>
<ol>
<li>Through <span class="caps">SNMP</span> support. Only information available in <a href="http://www.ieee802.org/1/files/public/MIBs/LLDP-MIB-200505060000Z.txt" title="LLDP-MIB"><abbr title="Link Layer Discovery Protocol"><abbr title="Link Layer Discovery Protocol"><span class="caps">LLDP</span></abbr></abbr>-<span class="caps">MIB</span></a>
    are exported. Therefore, implementation-specific values are
    not available. Moreover, <span class="caps">SNMP</span> support is currently&nbsp;read-only.</li>
<li>Through <code>lldpctl</code>. Thanks to a contribution from Andreas
    Hofmeister, the output can be requested to be formatted as an <span class="caps">XML</span>&nbsp;document.</li>
</ol>
<p>Integration of <em>lldpd</em> into a network stack was therefore limited to one
of those two channels. As an exemple, you can have a look at
<a href="http://git.vyatta.com/git/?p=vyatta-lldp.git;a=summary" title="Integration of lldpd in Vyatta">how Vyatta made the integration</a> using the second&nbsp;solution.</p>
<p>To provide a more robust solution, I have added a shared library,
<code>liblldpctl</code>, with a stable and well-defined <abbr title="Application Programming Interface"><span class="caps">API</span></abbr>. <code>lldpctl</code> is now
using it. I have followed those directions<sup id="fnref:library"><a href="#fn:library" rel="footnote">2</a></sup>:</p>
<ul>
<li>Consistent naming (all exported symbols are prefixed by
   <code>lldpctl_</code>). No pollution of the global&nbsp;namespace.</li>
<li>Consistent return codes (on errors, all functions returning
   pointers are returning <code>NULL</code>, all functions returning integers are
   returning <code>-1</code>).</li>
<li>Reentrant and thread-safe. No global&nbsp;variables.</li>
<li>One well-documented <a href="https://github.com/vincentbernat/lldpd/blob/0.7.1/src/lib/lldpctl.h" title="lldpctl.h">include file</a>.</li>
<li>Reduce the use of boilerplate code. Don&#8217;t segfault on <code>NULL</code>,
   accept integer input as string, provide easy&nbsp;iterators,&nbsp;&#8230;</li>
<li>Asynchronous <abbr title="Application Programming Interface"><span class="caps">API</span></abbr> for input/output. The library delegates reading
   and writing by calling user-provided functions. Those functions can
   yield their effects. In this case, the user has to callback the
   library when data is available for reading or writing. It is
   therefore possible to integrate the library with any existing
   event-loop. A thin synchronous layer is provided on top of this
   <abbr title="Application Programming Interface"><span class="caps">API</span></abbr>.</li>
<li>Opaque types with accessor&nbsp;functions.</li>
</ul>
<p>Accessing bits of information is done through &#8220;atoms&#8221; which are opaque
containers of type <code>lldpctl_atom_t</code>. From an atom, you can extract
some properties as integers, strings, buffers or other atoms. The list
of ports is an atom. A port in this list is also an atom. The list of
<span class="caps">VLAN</span> present on this port is an atom, as well as each <span class="caps">VLAN</span> in this
list. The <span class="caps">VLAN</span> name is a <code>NULL</code>-terminated string living in the scope
of an atom. Accessing a property is done by a handful of functions,
like <code>lldpctl_atom_get_str()</code>, using a specific key. For example, here
is how to display the list of <span class="caps">VLAN</span> assuming you have one port as an&nbsp;atom:</p>
<div class="codehilite"><pre><span class="n">vlans</span> <span class="o">=</span> <span class="n">lldpctl_atom_get</span><span class="p">(</span><span class="n">port</span><span class="p">,</span> <span class="n">lldpctl_k_port_vlans</span><span class="p">);</span>
<span class="n">lldpctl_atom_foreach</span><span class="p">(</span><span class="n">vlans</span><span class="p">,</span> <span class="n">vlan</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">vid</span> <span class="o">=</span> <span class="n">lldpctl_atom_get_int</span><span class="p">(</span><span class="n">vlan</span><span class="p">,</span>
                               <span class="n">lldpctl_k_vlan_id</span><span class="p">));</span>
    <span class="n">name</span> <span class="o">=</span> <span class="n">lldpctl_atom_get_str</span><span class="p">(</span><span class="n">vlan</span><span class="p">,</span>
                                <span class="n">lldpctl_k_vlan_name</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">vid</span> <span class="o">&amp;&amp;</span> <span class="n">name</span><span class="p">)</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;<span class="caps">VLAN</span> %d: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">vid</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
<span class="p">}</span>
<span class="n">lldpctl_atom_dec_ref</span><span class="p">(</span><span class="n">vlans</span><span class="p">);</span>
</pre></div>


<p>Internally, an atom is typed and reference counted. The size of the
<abbr title="Application Programming Interface"><span class="caps">API</span></abbr> is greatly limited thanks to this concept. There are currently
more than one hundred pieces of information that can be retrieved from
<code>lldpd</code>.</p>
<p>Ultimately, the library will also enable the full configuration of
<code>lldpd</code>. Currently, many aspects can only be configured through
command-line flags. The use of the library does not replace
<code>lldpctl</code> which will still be available and be the primary client of
the&nbsp;library.</p>
<h2 id="cli"><span class="caps">CLI</span></h2>
<p>Having a configuration file was requested since a long time. I didn&#8217;t
want to include a parser in <code>lldpd</code>: I am trying to keep it small. It
was already possible to configure <code>lldpd</code> through
<code>lldpctl</code>. Locations, network policies and power policies were the
three items that could be configured this way. So, the next step was
to enable <code>lldpctl</code> to read a configuration file, parse it and send
the result to <code>lldpd</code>. As a bonus, why not provide a full <span class="caps">CLI</span>
accepting the same statements with inline help and&nbsp;completion?</p>
<h3 id="parsing-completion">Parsing <span class="amp">&amp;</span> completion</h3>
<p>Because of completion, it is difficult to use a <span class="caps">YACC</span> generated
parser. Instead, I define a tree where each node accepts a word. A
node is defined with this&nbsp;function:</p>
<div class="codehilite"><pre><span class="k">struct</span> <span class="n">cmd_node</span> <span class="o">*</span><span class="n">commands_new</span><span class="p">(</span>
    <span class="k">struct</span> <span class="n">cmd_node</span> <span class="o">*</span><span class="p">,</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">,</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">,</span>
    <span class="kt">int</span><span class="p">(</span><span class="o">*</span><span class="n">validate</span><span class="p">)(</span><span class="k">struct</span> <span class="n">cmd_env</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">),</span>
    <span class="kt">int</span><span class="p">(</span><span class="o">*</span><span class="n">execute</span><span class="p">)(</span><span class="k">struct</span> <span class="n">lldpctl_conn_t</span><span class="o">*</span><span class="p">,</span> <span class="k">struct</span> <span class="n">writer</span><span class="o">*</span><span class="p">,</span>
        <span class="k">struct</span> <span class="n">cmd_env</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="p">),</span>
    <span class="kt">void</span> <span class="o">*</span><span class="p">);</span>
</pre></div>


<p>A node is defined&nbsp;by:</p>
<ul>
<li>its&nbsp;parent,</li>
<li>an optional accepted static&nbsp;token,</li>
<li>an help&nbsp;string,</li>
<li>an optional validation function and</li>
<li>an optional function to execute if the current token is&nbsp;accepted.</li>
</ul>
<p>When walking the tree, we maintain an environment which is both a
key-value store and a stack of positions in the tree. The validation
function can check the environment to see if we are in the right
context (we want to accept the keyword <code>foo</code> only once, for
example). The execution function can add the current token as a value
in the environment but it can also pop the current position in the
tree to resume walk from a previous&nbsp;node.</p>
<p>As an example, see how nodes for configuration of a coordinate-based
location are&nbsp;registered:</p>
<div class="codehilite"><pre><span class="cm">/* Our root node */</span>
<span class="k">struct</span> <span class="n">cmd_node</span> <span class="o">*</span><span class="n">configure_medloc_coord</span> <span class="o">=</span> <span class="n">commands_new</span><span class="p">(</span>
    <span class="n">configure_medlocation</span><span class="p">,</span>
    <span class="s">&quot;coordinate&quot;</span><span class="p">,</span> <span class="s">&quot;<span class="caps">MED</span> location coordinate configuration&quot;</span><span class="p">,</span>
    <span class="nb"><span class="caps">NULL</span></span><span class="p">,</span> <span class="nb"><span class="caps">NULL</span></span><span class="p">,</span> <span class="nb"><span class="caps">NULL</span></span><span class="p">);</span>

<span class="cm">/* The exit node.</span>
<span class="cm">   The validate function will check if we have both</span>
<span class="cm">   latitude and longitude. */</span>
<span class="n">commands_new</span><span class="p">(</span><span class="n">configure_medloc_coord</span><span class="p">,</span>
    <span class="n"><span class="caps">NEWLINE</span></span><span class="p">,</span> <span class="s">&quot;Configure <span class="caps">MED</span> location coordinates&quot;</span><span class="p">,</span>
    <span class="n">cmd_check_env</span><span class="p">,</span> <span class="n">cmd_medlocation_coordinate</span><span class="p">,</span>
    <span class="s">&quot;latitude,longitude&quot;</span><span class="p">);</span>

<span class="cm">/* Store latitude. Once stored, we pop two positions</span>
<span class="cm">   to go back to the &quot;root&quot; node. The user can only</span>
<span class="cm">   enter latitude once. */</span>
<span class="n">commands_new</span><span class="p">(</span>
    <span class="n">commands_new</span><span class="p">(</span>
        <span class="n">configure_medloc_coord</span><span class="p">,</span>
        <span class="s">&quot;latitude&quot;</span><span class="p">,</span> <span class="s">&quot;Specify latitude&quot;</span><span class="p">,</span>
        <span class="n">cmd_check_no_env</span><span class="p">,</span> <span class="nb"><span class="caps">NULL</span></span><span class="p">,</span> <span class="s">&quot;latitude&quot;</span><span class="p">),</span>
    <span class="nb"><span class="caps">NULL</span></span><span class="p">,</span> <span class="s">&quot;Latitude as xx.yyyyN or xx.yyyyS&quot;</span><span class="p">,</span>
    <span class="nb"><span class="caps">NULL</span></span><span class="p">,</span> <span class="n">cmd_store_env_value_and_pop2</span><span class="p">,</span> <span class="s">&quot;latitude&quot;</span><span class="p">);</span>

<span class="cm">/* Same thing for longitude */</span>
<span class="n">commands_new</span><span class="p">(</span>
    <span class="n">commands_new</span><span class="p">(</span>
        <span class="n">configure_medloc_coord</span><span class="p">,</span>
        <span class="s">&quot;longitude&quot;</span><span class="p">,</span> <span class="s">&quot;Specify longitude&quot;</span><span class="p">,</span>
        <span class="n">cmd_check_no_env</span><span class="p">,</span> <span class="nb"><span class="caps">NULL</span></span><span class="p">,</span> <span class="s">&quot;longitude&quot;</span><span class="p">),</span>
    <span class="nb"><span class="caps">NULL</span></span><span class="p">,</span> <span class="s">&quot;Longitude as xx.yyyyE or xx.yyyyW&quot;</span><span class="p">,</span>
    <span class="nb"><span class="caps">NULL</span></span><span class="p">,</span> <span class="n">cmd_store_env_value_and_pop2</span><span class="p">,</span> <span class="s">&quot;longitude&quot;</span><span class="p">);</span>
</pre></div>


<p>The definition of all commands is still a bit verbose but the system
is simple enough yet powerful enough to cover all needed&nbsp;cases.</p>
<h3 id="readline">Readline</h3>
<p>When faced with a <span class="caps">CLI</span>, we usually expect some perks like completion,
history handling and help. The most used library to provide such
features is the <a href="http://www.gnu.org/software/readline/" title="The GNU Readline Library"><span class="caps">GNU</span> Readline Library</a>. Because this is a <abbr title="GNU General Public License"><span class="caps">GPL</span></abbr>
library, I have first searched an alternative. There are several of&nbsp;them:</p>
<ul>
<li><a href="http://cvsweb.netbsd.org/bsdweb.cgi/src/lib/libedit/" title="NetBSD libedit">NetBSD Editline library</a> (<code>libedit</code>).</li>
<li><a href="http://thrysoee.dk/editline/" title="Autotool port of libedit">Autotool port of the NetBSD Editline library</a> (also <code>libedit</code>).</li>
<li><a href="http://packages.qa.debian.org/e/editline.html">Debian version of the Editline library</a> (<code>libeditline</code>).</li>
<li><a href="https://github.com/antirez/linenoise" title="linenoise, a minimal readline replacement">linenoise</a>, a small and minimal readline&nbsp;library.</li>
<li>Many&nbsp;others.</li>
</ul>
<p>From an <abbr title="Application Programming Interface"><span class="caps">API</span></abbr> point of view, the first three libraries support the <em><span class="caps">GNU</span>
Readline</em> <abbr title="Application Programming Interface"><span class="caps">API</span></abbr>. They also have a common native <abbr title="Application Programming Interface"><span class="caps">API</span></abbr>. Moreover, this
native <abbr title="Application Programming Interface"><span class="caps">API</span></abbr> also handles tokenization. Therefore, I have developed the
first version of the <span class="caps">CLI</span> with this <abbr title="Application Programming Interface"><span class="caps">API</span></abbr><sup id="fnref:libeditapi"><a href="#fn:libeditapi" rel="footnote">3</a></sup>.</p>
<p>Unfortunately, I noticed later this library is not very common in the
Linux world and is not available in <span class="caps">RHEL</span>. Since I have used the native
<abbr title="Application Programming Interface"><span class="caps">API</span></abbr>, it was not possible to fallback to the <em><span class="caps">GNU</span> Readline</em>
library. So, let&#8217;s switch! Thanks to the
<a href="http://www.gnu.org/software/autoconf-archive/ax_lib_readline.html" title="ax_lib_readline in autoconf archive">appropriate macro from the Autoconf Archive</a> (with
small modifications), the compilation and linking differences between
the libraries are taken care&nbsp;of.</p>
<p>Because <em><span class="caps">GNU</span> Readline</em> library does not come with a tokenizer, I had
to write one myself. The <abbr title="Application Programming Interface"><span class="caps">API</span></abbr> is also badly documented and it is
difficult to know which symbol is available in which version. I have
limited myself&nbsp;to:</p>
<ul>
<li><code>readline()</code>, <code>addhistory()</code>,</li>
<li><code>rl_insert_text()</code>,</li>
<li><code>rl_forced_update_display()</code>,</li>
<li><code>rl_bind_key()</code></li>
<li><code>rl_line_buffer</code> and <code>rl_point</code>.</li>
</ul>
<p>Unfortunately, the various <code>libedit</code> libraries have a noop for
<code>rl_bind_key()</code>. Therefore, completion and online help is not
available with them. I have noticed that most <abbr title="Berkeley Software Distribution"><span class="caps">BSD</span></abbr> come with <em><span class="caps">GNU</span>
Readline</em> library preinstalled, so it could be considered as a system
library. Nonetheless, linking with <code>libedit</code> to avoid licensing issues
is possible and help can be obtained by prefixing the command with
<code>help</code>.</p>
<h1 id="os-specific-support"><span class="caps">OS</span> specific support</h1>
<h2 id="netlink-on-linux">Netlink on Linux</h2>
<p>Previously, the list of interfaces was retrieved through
<code>getifaddrs()</code>. <em>lldpd</em> is now using directly <a href="http://en.wikipedia.org/wiki/Netlink" title="Netlink on Wikipedia">Netlink</a> on
Linux. This is not a big change since the <em><span class="caps">GNU</span> C Library</em> already uses
it to implement <code>getifaddrs()</code> and additional information, like <span class="caps">VLAN</span>,
are still retrieved through <code>ioctl()</code> or <em>sysfs</em>. However, <em>lldpd</em>
now gets notified when a change happens and update all interfaces in
the next&nbsp;second.</p>
<p>Like many other projects, I have written my own <em>Netlink</em> implementation
instead of using <a href="http://www.infradead.org/~tgr/libnl/" title="Netlink Protocol Library Suite">libnl</a>, a nice collection of libraries providing
everything you need to query the kernel through <em>Netlink</em>, including
some advanced bits.&nbsp;Why?</p>
<ol>
<li>
<p>The latest version of <a href="http://www.infradead.org/~tgr/libnl/" title="Netlink Protocol Library Suite">libnl</a> is still young and its
    availability in major distributions is scarce. It is not available
    in Debian Squeeze but will be available in Debian Wheezy. Like
    <em>libevent</em>, I could circumvent this problem by shipping the
    library with <em>lldpd</em> and use it when there is not system
    alternative.&nbsp;But&#8230;</p>
</li>
<li>
<p><em>libnl</em> is licensed under <abbr title="GNU Lesser General Public License"><span class="caps">LGPL</span></abbr> 2.1. This makes static linking
    difficult because the license is quite shaddy about static linking
    being derivative work or not. It is believed that it is authorized
    under the same provisions as in <abbr title="GNU Lesser General Public License"><span class="caps">LGPL</span></abbr> 3 which handles the case
    explicitely. This has been a problem with many projects. For
    example, <a href="&quot;http://www.ogre3d.org/&quot;" title="OGRE: Open Source 3D Graphics Engine"><span class="caps">OGRE</span></a> has added <a href="http://www.ogre3d.org/2009/03/06/lgpl-exclusions-added-static-linking-now-simpler" title="OGRE: static linking now simpler">an exception for static linking</a> in
    version 1.6 and <a href="http://www.ogre3d.org/2009/09/15/ogre-will-switch-to-the-mit-license-from-1-7" title="OGRE will switch to the MIT license from 1.7">switched to <span class="caps">MIT</span> license</a> in version&nbsp;1.7.</p>
</li>
</ol>
<p>I had a short discussion with Thomas Graf about this issue and he
seems willing to add a similar exception. This may take some time, but
once this is done, I will happily switch to <em>libnl</em> and retrieve more
stuff from <em>Netlink</em>.</p>
<h2 id="bsd-support"><abbr title="Berkeley Software Distribution"><span class="caps">BSD</span></abbr> support</h2>
<p>Until version 0.7, <em>lldpd</em> was Linux-only. The rewrite to use
<em>Netlink</em> was the occasion to abstract interfaces and to port to other
<span class="caps">OS</span>. The first port was for <a href="http://www.debian.org/ports/kfreebsd-gnu/" title="Debian GNU/kFreeBSD">Debian <span class="caps">GNU</span>/kFreeBSD</a>, then for
<a href="http://www.freebsd.org" title="FreeBSD">FreeBSD</a>, <a href="http:/www.openbsd.org" title="OpenBSD">OpenBSD</a> and <a href="http://www.netbsd.org" title="NetBSD">NetBSD</a>. They all share the same
source&nbsp;code:</p>
<ul>
<li><code>getifaddrs()</code> to get the list of&nbsp;interfaces,</li>
<li><code>bpf(4)</code> to attach to an interface to receive and send&nbsp;packets,</li>
<li><code>PF_ROUTE</code> socket to be notified when a change&nbsp;happens.</li>
</ul>
<p>Each <abbr title="Berkeley Software Distribution"><span class="caps">BSD</span></abbr> has its own <code>ioctl()</code> to retrieve <span class="caps">VLAN</span>, bridging and bonding
bits but they are quite similar. The code was usually adapted from
<code>ifconfig.c</code>.</p>
<p>The <abbr title="Berkeley Software Distribution"><span class="caps">BSD</span></abbr> ports have the same functionalities than the Linux port,
except for <em>NetBSD</em> which lacks support for <abbr title="Link Layer Discovery Protocol"><span class="caps">LLDP</span></abbr>-<span class="caps">MED</span> inventory since I
didn&#8217;t find a simple way to retrieve <span class="caps">DMI</span> related&nbsp;information.</p>
<p>They also offer greater security by filtering packets sent. Moreover,
<em>OpenBSD</em> allows to lock the filters set on the&nbsp;socket:</p>
<div class="codehilite"><pre><span class="cm">/* Install write filter (optional) */</span>
<span class="k">if</span> <span class="p">(</span><span class="n">ioctl</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n"><span class="caps">BIOCSETWF</span></span><span class="p">,</span> <span class="p">(</span><span class="n">caddr_t</span><span class="p">)</span><span class="o">&amp;</span><span class="n">fprog</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">rc</span> <span class="o">=</span> <span class="n">errno</span><span class="p">;</span>
    <span class="n">log_info</span><span class="p">(</span><span class="s">&quot;privsep&quot;</span><span class="p">,</span> <span class="s">&quot;unable to setup write <span class="caps">BPF</span> filter for %s&quot;</span><span class="p">,</span>
        <span class="n">name</span><span class="p">);</span>
    <span class="k">goto</span> <span class="n">end</span><span class="p">;</span>
<span class="p">}</span>

<span class="cm">/* Lock interface */</span>
<span class="k">if</span> <span class="p">(</span><span class="n">ioctl</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n"><span class="caps">BIOCLOCK</span></span><span class="p">,</span> <span class="p">(</span><span class="n">caddr_t</span><span class="p">)</span><span class="o">&amp;</span><span class="n">enable</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">rc</span> <span class="o">=</span> <span class="n">errno</span><span class="p">;</span>
    <span class="n">log_info</span><span class="p">(</span><span class="s">&quot;privsep&quot;</span><span class="p">,</span> <span class="s">&quot;unable to lock <span class="caps">BPF</span> interface %s&quot;</span><span class="p">,</span>
        <span class="n">name</span><span class="p">);</span>
    <span class="k">goto</span> <span class="n">end</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>


<p>This is a very nice feature. <em>lldpd</em> is using a privileged process to
open the raw socket. The socket is then transmitted to an unprivileged
process. Without this feature, the unprivileged process can remove the
<span class="caps">BPF</span> filters. I have ported the
<a href="http://git.kernel.org/?p=linux/kernel/git/davem/net-next.git;a=commit;h=d59577b6ffd313d0ab3be39cb1ab47e29bdc9182" title="Abilitry to lock a socket filter program">ability to lock a socket filter program</a> to Linux. However, I still
have to add a write&nbsp;filter.</p>
<h2 id="os-x-support"><span class="caps">OS</span> X support</h2>
<p>Once FreeBSD was supported, supporting <span class="caps">OS</span> X seemed easy. I got
sponsored by <a href="http://xcloud.me/" title="Xcloud - Mac cloud server">xcloud.me</a> which provided a virtual Mac server. Making
<em>lldpd</em> work with <span class="caps">OS</span> X took only two days, including a full hour to
guess how to get Apple Xcode without providing a credit&nbsp;card.</p>
<p>To help people installing <em>lldpd</em> on <span class="caps">OS</span> X, I have also written a
<a href="https://github.com/mxcl/homebrew/pull/17052" title="Formula to install lldpd through Homebrew"><em>lldpd</em> formula</a> for <a href="http://mxcl.github.com/homebrew/" title="Homebrew: the missing package manager for OS X">Homebrew</a> which seems to be the most
popular package manager for <span class="caps">OS</span>&nbsp;X.</p>
<h2 id="upstart-and-systemd-support">Upstart and systemd support</h2>
<p>Many distributions propose <a href="http://upstart.ubuntu.com/" title="upstart, an event-based init daemon">upstart</a> and <a href="http://www.freedesktop.org/wiki/Software/systemd" title="systemd, system and service manager">systemd</a> as a
replacement or an alternative for the classic SysV init. Like most
daemons, <em>lldpd</em> detaches itself from the terminal and run in the
background, by forking twice, once it is ready (for <em>lldpd</em>, this just
means we have setup the control socket). While both <em>upstart</em> and
<em>systemd</em> can accommodate daemons that behave like this, it is
recommended to not fork. How to advertise readiness in this&nbsp;case?</p>
<p>With <em>upstart</em>, <em>lldpd</em> will send itself the <code>SIGSTOP</code>
signal. <em>upstart</em> will detect this, resume <em>lldpd</em> with <code>SIGCONT</code> and
assume it is ready. The code to support <em>upstart</em> is therefore quite
simple. Instead of calling <code>daemon()</code>, do&nbsp;this:</p>
<div class="codehilite"><pre><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">upstartjob</span> <span class="o">=</span> <span class="n">getenv</span><span class="p">(</span><span class="s">&quot;UPSTART_JOB&quot;</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">upstartjob</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">upstartjob</span><span class="p">,</span> <span class="s">&quot;lldpd&quot;</span><span class="p">)))</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">log_debug</span><span class="p">(</span><span class="s">&quot;main&quot;</span><span class="p">,</span> <span class="s">&quot;running with upstart, don&#39;t fork but stop&quot;</span><span class="p">);</span>
<span class="n">raise</span><span class="p">(</span><span class="n"><span class="caps">SIGSTOP</span></span><span class="p">);</span>
</pre></div>


<p>The job configuration file looks like&nbsp;this:</p>
<div class="codehilite"><pre><span class="c"># lldpd - <span class="caps">LLDP</span> daemon</span>

<span class="n">description</span> <span class="s">&quot;<span class="caps">LLDP</span> daemon&quot;</span>

<span class="n">start</span> <span class="n">on</span> <span class="n">net</span><span class="o">-</span><span class="n">device</span><span class="o">-</span><span class="n">up</span> <span class="n"><span class="caps">IFACE</span></span><span class="p">=</span><span class="n">lo</span>
<span class="n">stop</span> <span class="n">on</span> <span class="n">runlevel</span> <span class="p">[</span>06<span class="p">]</span>

<span class="n">expect</span> <span class="n">stop</span>
<span class="n">respawn</span>

<span class="n">script</span>
  <span class="p">.</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">default</span><span class="o">/</span><span class="n">lldpd</span>
  <span class="nb">exec</span> <span class="n">lldpd</span> $<span class="n">DAEMON_ARGS</span>
<span class="k">end</span> <span class="n">script</span>
</pre></div>


<p><em>systemd</em> provides a socket to achieve the same goal. An application
is expected to write <code>READY=1</code> to the socket when it is ready. With
the provided library, this is just a matter of calling
<code>sd_notify("READY=1\n")</code>. Since <code>sd_notify()</code> has less than 30 lines
of code, I have rewritten it to avoid an external dependency. The
appropriate unit file&nbsp;is:</p>
<div class="codehilite"><pre><span class="k">[Unit]</span>
<span class="na">Description</span><span class="o">=</span><span class="s"><span class="caps">LLDP</span> daemon</span>
<span class="na">Documentation</span><span class="o">=</span><span class="s">man:lldpd(8)</span>

<span class="k">[Service]</span>
<span class="na">Type</span><span class="o">=</span><span class="s">notify</span>
<span class="na">NotifyAccess</span><span class="o">=</span><span class="s">main</span>
<span class="na">EnvironmentFile</span><span class="o">=</span><span class="s">-/etc/default/lldpd</span>
<span class="na">ExecStart</span><span class="o">=</span><span class="s">/usr/sbin/lldpd $DAEMON_ARGS</span>
<span class="na">Restart</span><span class="o">=</span><span class="s">on-failure</span>

<span class="k">[Install]</span>
<span class="na">WantedBy</span><span class="o">=</span><span class="s">multi-user.target</span>
</pre></div>


<h2 id="os-include-files"><span class="caps">OS</span> include files</h2>
<p>Linux-specific include files were a major pain in previous versions of
<em>lldpd</em>. The problems range from missing header files (like
<code>linux/if_bonding.h</code>) to the use of kernel-only types. Those headers
have a difficult history. They were first shipped with the C library
but were rarely synced and almost always outdated. They were then
extracted from kernel version with almost no change and lagged behind
the kernel version used by the released distribution<sup id="fnref:sarge"><a href="#fn:sarge" rel="footnote">4</a></sup>.</p>
<p>Today, the problem is acknowledged and is being solved by both the
distributions which extract the headers from the packaged kernel and
by kernel developers with a
<a href="http://lwn.net/Articles/507794/" title="The UAPI header file split">separation of kernel-only headers from user-space <abbr title="Application Programming Interface"><abbr title="Application Programming Interface"><span class="caps">API</span></abbr></abbr> headers</a>. However,
we still need to handle&nbsp;legacy.</p>
<p>A good case is <code>linux/ethtool.h</code>:</p>
<ul>
<li>It can just be&nbsp;absent.</li>
<li>It can use <code>u8</code>, <code>u16</code> types which are kernel-only types. To work
   around this issue, <a href="https://github.com/vincentbernat/lldpd/blob/0.5.7/m4/ethtool.m4" title="Type munging for linux/ethtool.h">type munging</a> can be&nbsp;setup.</li>
<li>It can miss some definition, like <code>SPEED_10000</code>. In this case, you
   either define the missing bits and find yourself with a long copy
   of the original header interleaved with <code>#ifdef</code> or conditionally
   use each symbol. The latest solution is a burden by itself but it
   also hinders some functionalities that can be available in the
   running&nbsp;kernel.</li>
</ul>
<p>The easy solution to all this mess is to just include the appropriate
kernel headers into the source tree of the project. Thanks to Google
ripping them for its Bionic C library, we know that
<a href="http://lwn.net/Articles/434318/" title="Has Bionic stepped over the GPL line?">copying kernel headers into a program does not create a derivative work</a>.</p>
<div class="footnote">
<hr>
<ol>
<li id="fn:uint16t">
<p>Therefore, the use of <code>u_int16_t</code> and <code>u_int8_t</code> types is
        a left-over of the previous serializer where the size of
        all members was important.&#160;<a href="#fnref:uint16t" rev="footnote" title="Jump back to footnote 1 in the text">&#8617;</a></p>
</li>
<li id="fn:library">
<p>For more comprehensive guidelines, be sure to check
        <a href="http://davidz25.blogspot.fr/2011/07/writing-c-library-intro-conclusion-and.html" title="Writing a C library">Writing a C library</a>.&#160;<a href="#fnref:library" rev="footnote" title="Jump back to footnote 2 in the text">&#8617;</a></p>
</li>
<li id="fn:libeditapi">
<p>Tokenization is not the only advantage of <code>libedit</code>
           native <abbr title="Application Programming Interface"><abbr title="Application Programming Interface"><abbr title="Application Programming Interface"><span class="caps">API</span></abbr></abbr></abbr>. The <abbr title="Application Programming Interface"><abbr title="Application Programming Interface"><abbr title="Application Programming Interface"><span class="caps">API</span></abbr></abbr></abbr> is also cleaner, does not have a
           global state and has a better documentation. All the
           implementations are also <abbr title="Berkeley Software Distribution"><abbr title="Berkeley Software Distribution"><abbr title="Berkeley Software Distribution"><span class="caps">BSD</span></abbr></abbr></abbr> licensed.&#160;<a href="#fnref:libeditapi" rev="footnote" title="Jump back to footnote 3 in the text">&#8617;</a></p>
</li>
<li id="fn:sarge">
<p>For example, in Debian Sarge, the Linux kernel was a 2.6.8
      (2004) while the kernel headers were extracted from some
      pre-2.6 kernel.&#160;<a href="#fnref:sarge" rev="footnote" title="Jump back to footnote 4 in the text">&#8617;</a></p>
</li>
</ol>
</div>	</div>
	      </article>
      <div id="disqus_thread">
  <div id="lf-disqus">View or add a new comment (with Disqus)</div>
</div>
<script type="text/javascript">
    var disqus_shortname = 'luffycx';
    var disqus_identifier = '/en/blog/2013-lldpd-0.7.1.html';
    var disqus_url = 'http://vincent.bernat.im/en/blog/2013-lldpd-0.7.1.html';
    var disqus_title = 'lldpd 0.7.1';
    var disqus_config = function () {
       this.language = "en";
    }; 
</script>
    </div>
  </div>

    <footer>
    <div>
      <h3>Other stuff</h3>
      <ul>
	<li><a href="https://github.com/vincentbernat">GitHub</a></li>
	<li><a href="http://www.linkedin.com/in/vincentbernat">LinkedIn</a></li>
	<li><a href="http://qa.debian.org/developer.php?login=bernat">Debian</a></li>
	<li><a href="http://delicious.com/vbernat/">Delicious</a></li>
	<li><a href="http://twitter.com/vince2_">@vince2_</a></li>
      </ul>
    </div>
 
    <div>
      <h3>Sources</h3>
      <ul>
	<li>Powered by <a href="http://ringce.com/hyde">Hyde</a></li>
	<li><a href="https://github.com/vincentbernat/www.luffy.cx">Site</a></li>
	<li>
	  <a href="https://github.com/vincentbernat/www.luffy.cx/tree/master/content/en/blog/2013-lldpd-0.7.1.html">Page</a>
	</li>
      </ul>
    </div>
    <address class="vcard author">
      © 2011 <a class="fn email" href="mailto:vincent@bernat.im">Vincent Bernat</a>
      <a class="lf-sprite-rss"
	 href="/en/blog/atom.xml">
	&nbsp;
      </a>
    </address>
  </footer>

    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js"></script>
  <script src="//d1g3mdmxf8zbo9.cloudfront.net/js/luffy.9265eb61.js" async></script>
  <script>
    var _gaq=[['_setAccount','UA-21482482-4'],['_setDomainName','vincent.bernat.im'],['_trackPageview']];
    (function(d,t){var g=d.createElement(t),s=d.getElementsByTagName(t)[0];g.async=1;
    g.src=('https:'==location.protocol?'//ssl':'//www')+'.google-analytics.com/ga.js';
    s.parentNode.insertBefore(g,s)}(document,'script'));
</script>
</body>
</html>