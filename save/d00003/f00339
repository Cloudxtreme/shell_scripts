<!DOCTYPE html>
<html lang="en">

<head>
<title>Joe Devietti - UPenn CIS</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link href="./css/all.css" rel="stylesheet">
<script src="./js/tb_jquery.js" type="text/javascript"></script>
</head>

<body>

<div class="container-fluid">

  <!-- top margin -->
  <div class="row-fluid">
    <div class="span12 topMargin"></div>
  </div>

  <!-- photo, name, nav pills -->
  <div class="row-fluid bordr" style="position: relative;">
    <div class="span3">
      <a href="./photo.html">
      <img src="./images/joe-mg.jpg" class="img-polaroid" id="photo" alt="at Philly's Magic Gardens" title="at Philly's Magic Gardens" />
      </a>
    </div>
    
    <div class="span3">
      <div id="nameDiv" class="bordr">
      <div class="name titleSans">Joe Devietti</div>
      <span class="subtitle">Assistant Professor, <a href="http://cis.upenn.edu/">Computer &amp; Information Science</a></span>
      </div>
    </div>
    
    <div class="span6" style="float: right;">
      <ul class="nav nav-pills navpenn">
        <li class="active">
        <a href="./index.html">Home</a>
        </li>
        
        <li class="dropdown inactive">
        <a class="dropdown-toggle" data-toggle="dropdown" href="#">
        Teaching <b class="caret"></b>
        </a>
        <ul class="dropdown-menu navpenn inactive">
          <li><a href="./classes/cis501-fall2013/">currently: CIS 501</a></li>
          <li><a href="./teaching.html">previous courses</a></li>
        </ul>
        </li>
        
        <li class="inactive">
        <a href="./research.html">Research</a>
        </li>
        
        <li class="dropdown inactive">
        <a class="dropdown-toggle" data-toggle="dropdown" href="#">
        CV <b class="caret"></b>
        </a>
        <ul class="dropdown-menu navpenn inactive">
          <li><a href="./cv.html">html</a></li>
          <li><a href="./joe-devietti-cv.pdf">pdf</a></li>
        </ul>
        </li>
        
        <li class="inactive">
        <a href="./about.html">About</a>
        </li>
      </ul>
    </div>
    
  </div>

  <!-- contact info and body -->
  <div class="row-fluid">
    <div class="span3" itemscope itemtype="http://schema.org/Person">
      <span itemprop="name" style="display:none">Joseph Devietti</span>
      <div class="contactElement">
        <img src="./images/email.png" alt="my email address: my last name at cis dot upenn dot edu" />
      </div>
      <div itemprop="telephone" class="contactElement">(215) 746-4223</div>
      <div itemprop="address" itemscope itemtype="http://schema.org/PostalAddress" class="contactElement">
        <div itemprop="streetAddress">Levine Hall 572<br />
        3330 Walnut Street</div>
        <span itemprop="addressLocality">Philadelphia</span>,
	<span itemprop="addressRegion">PA</span>
	<span itemprop="postalCode">19104-3409</span>
      </div>
    </div>

    <div class="span7 bordr">
      <div class="contactElement"></div>
      <p>I work on making multiprocessors easier to program by
leveraging changes in both computer architectures and parallel programming
models. I recently finished my PhD at the <a href="http://www.cs.washington.edu">University of Washington</a>, working with
<a href="http://homes.cs.washington.edu/~luisceze/">Luis Ceze</a> and <a href="http://homes.cs.washington.edu/~djg/">Dan Grossman</a>.</p>
      
<!-- <h1>News</h1> -->
<!-- <p><b>Please consider submitting</b> to the <a -->
<!-- href="http://sigops.org/sosp/sosp13/posters.html">SOSP Poster Track</a>. I and -->
<!-- the rest of the poster program committee are trying to put together a program of -->
<!-- diverse, novel and visually interesting posters. Submissions are due soon: 20 -->
<!-- August at midnight Pacific.</p> -->

<h1>Teaching</h1>
      
<p> I'm teaching CIS 501, graduate computer architecture, in Fall 2013 (TR 4:30-6:00).
More info at <a href="./classes/cis501-fall2013/">the course web page</a>.
</p>

<h1>Recent Publications <a href="research.html" style="font-size: 50%">full list</a></h1>

<p>Many of the paper links below use the ACM's <a href="http://www.acm.org/publications/acm-author-izer-service">Author-izer
service</a>, which tracks download statistics and provides a small
kickback to various ACM <a href="http://www.acm.org/sigs/">Special
Interest Groups</a> for each download.</p>

<ul class="h2List">
<li class="pubItem"><a id="gpudet"></a><a class="pubTitle noScreen" href="http://dl.acm.org/authorize?6809238">GPUDet: A Deterministic GPU Architecture</a><span class="pubTitle noPrint">GPUDet: A Deterministic GPU Architecture</span>
<div class="pubAuthors">Hadi Jooybar, <a href="http://www.ece.ubc.ca/~wwlfung/" class="pubAuthor">Wilson W. L. Fung</a>, Mike O'Connor, <a href="http://www.cis.upenn.edu/~devietti/" class="pubAuthor">Joseph Devietti</a> and <a href="http://www.ece.ubc.ca/~aamodt/" class="pubAuthor">Tor Aamodt</a></div>
<div><span class="pubConference">International Conference on Architectural Support for Programming Languages &amp; Operating Systems</span><span class="pubConferenceAbbreviation"> (ASPLOS '13)</span>, March 2013
</div>
<div class="noPrint"><span class="pubMediaLink">[<a data-toggle="collapse" data-target="#abstractDivgpudet">abstract</a>]</span><span class="pubMediaLink">[<a href="http://dl.acm.org/authorize?6809238" class="pubLinkToPaper">paper</a>]</span><span class="pubMediaLink">[<a href="http://www.ece.ubc.ca/~aamodt/GPUDet">code</a>]</span></div>
<div id="abstractDivgpudet" class="pubAbstract collapse"><p>Nondeterminism is a key challenge in developing multithreaded applications. Even with the same input, each execution of a multithreaded program may produce a different output. This behavior complicates debugging and limits one's ability to test for correctness. This non-reproducibility situation is aggravated on massively parallel architectures like graphics processing units (GPUs) with thousands of concurrent threads. We believe providing a deterministic environment to ease debugging and testing of GPU applications is essential to enable a broader class of software to use GPUs.</p><p>Many hardware and software techniques have been proposed for providing determinism on general-purpose multi-core processors. However, these techniques are designed for small numbers of threads. Scaling them to thousands of threads on a GPU is a major challenge. This paper proposes a scalable hardware mechanism, GPUDet, to provide determinism in GPU architectures. In this paper we characterize the existing deterministic and nondeterministic aspects of current GPU execution models, and we use these observations to inform GPUDet's design. For example, GPUDet leverages the inherent determinism of the SIMD hardware in GPUs to provide determinism within a wavefront at no cost. GPUDet also exploits the Z-Buffer Unit, an existing GPU hardware unit for graphics rendering, to allow parallel out-of-order memory writes to produce a deterministic output. Other optimizations in GPUDet include deterministic parallel execution of atomic operations and a workgroup-aware algorithm that eliminates unnecessary global synchronizations.</p><p>Our simulation results indicate that GPUDet incurs only 2Ã— slowdown on average over a baseline nondeterministic architecture, with runtime overheads as low as 4% for compute-bound applications, despite running GPU kernels with thousands of threads. We also characterize the sources of overhead for deterministic execution on GPUs to provide insights for further optimizations.</p></div></li>

<li class="pubItem"><a id="radish"></a><a class="pubTitle noScreen" href="http://dl.acm.org/authorize?6719377">RADISH: Always-On Sound and Complete Race Detection in Software and Hardware</a><span class="pubTitle noPrint">RADISH: Always-On Sound and Complete Race Detection in Software and Hardware</span>
<div class="pubAuthors"><a href="http://www.cis.upenn.edu/~devietti/" class="pubAuthor">Joseph Devietti</a>, <a href="http://homes.cs.washington.edu/~bpw/" class="pubAuthor">Ben Wood</a>, <a href="http://research.microsoft.com/en-us/people/kstrauss/" class="pubAuthor">Karin Strauss</a>, <a href="http://homes.cs.washington.edu/~luisceze/" class="pubAuthor">Luis Ceze</a>, <a href="http://homes.cs.washington.edu/~djg/" class="pubAuthor">Dan Grossman</a> and <a href="http://research.microsoft.com/en-us/people/qadeer/" class="pubAuthor">Shaz Qadeer</a></div>
<div><span class="pubConference">International Symposium on Computer Architecture</span><span class="pubConferenceAbbreviation"> (ISCA '12)</span>, June 2012
</div>
<div class="noPrint"><span class="pubMediaLink">[<a data-toggle="collapse" data-target="#abstractDivradish">abstract</a>]</span><span class="pubMediaLink">[<a href="http://dl.acm.org/authorize?6719377" class="pubLinkToPaper">paper</a>]</span><span class="pubMediaLink">[slides: <a href="slides/radish-isca2012.key">key</a> <a href="slides/radish-isca2012.pdf">pdf</a>]</span><span class="pubMediaLink">[<a href="ftp://ftp.cs.washington.edu/tr/2012/04/UW-CSE-12-04-01.PDF">tech report with proofs</a>]</span><span class="pubMediaLink">[<a href="code/radishsim-v1.tar.gz">code</a>]</span><span class="pubMediaLink">[<a href="http://public.tableausoftware.com/views/RADISH-ISCA2012/Figure1FastTrackprofiling?:embed=y">data</a>]</span></div>
<div id="abstractDivradish" class="pubAbstract collapse"><p>Data-race freedom is a valuable safety property for multithreaded programs that helps with catching bugs, simplifying memory consistency model semantics, and verifying and enforcing both atomicity and determinism. Unfortunately, existing software-only race detectors are precise but slow; proposals with hardware support offer higher performance but are imprecise. Both precision and performance are necessary to achieve the many advantages always-on race detection could provide. </p><p> To resolve this trade-off, we propose RADISH, a hybrid hardware-software race detector that is always-on and fully precise. In RADISH, hardware caches a principled subset of the metadata necessary for race detection; this subset allows the vast majority of race checks to occur completely in hardware. A flexible software layer handles persistence of race detection metadata on cache evictions and occasional queries to this expanded set of metadata. We show that RADISH is correct by proving equivalence to a conventional happens-before race detector. </p><p> Our design has modest hardware complexity: caches are completely unmodified and we piggy-back on existing coherence messages but do not otherwise modify the protocol. RADISH can furthermore leverage type-safe languages to reduce overheads substantially. Our evaluation of a simulated 8-core RADISH processor using PARSEC benchmarks shows runtime overheads from negligible to 2x. Furthermore, RADISH outperforms the leading software-only race detector by 2x-37x.</p></div></li>

<li class="pubItem"><a id="meldwodet"></a><a class="pubTitle noScreen" href="http://www.cs.umass.edu/~emery/wodet3/wodet3-paper3.pdf">The Case For Merging Execution- and Language-level Determinism with MELD</a><span class="pubTitle noPrint">The Case For Merging Execution- and Language-level Determinism with MELD</span>
<div class="pubAuthors"><a href="http://www.cis.upenn.edu/~devietti/" class="pubAuthor">Joseph Devietti</a>, <a href="http://homes.cs.washington.edu/~djg/" class="pubAuthor">Dan Grossman</a> and <a href="http://homes.cs.washington.edu/~luisceze/" class="pubAuthor">Luis Ceze</a></div>
<div><span class="pubConference">Workshop on Determinism and Correctness in Parallel Programming</span><span class="pubConferenceAbbreviation"> (WoDet '12)</span>, held in conjunction with ASPLOS '12, March 2012
</div>
<div class="noPrint"><span class="pubMediaLink">[<a data-toggle="collapse" data-target="#abstractDivmeldwodet">abstract</a>]</span><span class="pubMediaLink">[<a href="http://www.cs.umass.edu/~emery/wodet3/wodet3-paper3.pdf" class="pubLinkToPaper">paper</a>]</span><span class="pubMediaLink">[slides: <a href="slides/meld-wodet2012-slides.key">key</a> <a href="slides/meld-wodet2012-slides.pdf">pdf</a>]</span></div>
<div id="abstractDivmeldwodet" class="pubAbstract collapse"><p>Nondeterminism is a key contributor to the difficulty of parallel programming. Many research projects have shown how to provide deterministic parallelism, but with unfortunate trade-offs. Deterministic execution enforces determinism for arbitrary programs but with significant runtime cost, while deterministic languages enforce determinism statically (without runtime overhead) but only for fork-join programs expressible in their static type systems. </p><p> MELD unifies these approaches. We explain the requirements for soundly integrating a deterministic language into a deterministic execution system, and describe a simple qualifier-based type checker that ensures isolation for code written in a deterministic language. We also extend MELD to incorporate nondeterministic operations without compromising the determinism of the rest of the program. Our experiments with benchmarks from the SPLASH2 and PARSEC suites show that a small number of annotations can accelerate the performance of deterministic versions of these programs by 2-6x.</p></div></li>

<li class="pubItem"><a id="rcdc"></a><a class="pubTitle noScreen" href="http://dl.acm.org/authorize?473781">RCDC: A Relaxed-Consistency Deterministic Computer</a><span class="pubTitle noPrint">RCDC: A Relaxed-Consistency Deterministic Computer</span>
<div class="pubAuthors"><a href="http://www.cis.upenn.edu/~devietti/" class="pubAuthor">Joseph Devietti</a>, <a href="http://homes.cs.washington.edu/~nelson/" class="pubAuthor">Jacob Nelson</a>, <a href="http://homes.cs.washington.edu/~tbergan/" class="pubAuthor">Tom Bergan</a>, <a href="http://homes.cs.washington.edu/~luisceze/" class="pubAuthor">Luis Ceze</a> and <a href="http://homes.cs.washington.edu/~djg/" class="pubAuthor">Dan Grossman</a></div>
<div><span class="pubConference">International Conference on Architectural Support for Programming Languages &amp; Operating Systems</span><span class="pubConferenceAbbreviation"> (ASPLOS '11)</span>, March 2011
</div>
<div class="noPrint"><span class="pubMediaLink">[<a data-toggle="collapse" data-target="#abstractDivrcdc">abstract</a>]</span><span class="pubMediaLink">[<a href="http://dl.acm.org/authorize?473781" class="pubLinkToPaper">paper</a>]</span><span class="pubMediaLink">[slides: <a href="slides/rcdc-asplos2011-final.pdf">pdf</a> <a href="slides/rcdc-asplos2011-final.pptx">pptx</a>]</span><span class="pubMediaLink">[<a href="http://sampa.cs.washington.edu/sampa/Deterministic_MultiProcessing_(DMP)#RCDC_Simulator_Source_Code_and_Data">code</a>]</span><span class="pubMediaLink">[<a href="http://linuxforlovers.wordpress.com/2011/01/27/rcdc-simulator-release-notes/">code readme</a>]</span><span class="pubMediaLink">[<a href="http://public.tableausoftware.com/views/RCDCARelaxedConsistencyDeterministicComputer/Fig7OverallPerformance?:embed=yes&amp;:toolbar=yes&amp;:tabs=yes">data</a>]</span></div>
<div id="abstractDivrcdc" class="pubAbstract collapse"><p>Providing deterministic execution significantly simplifies the debugging, testing, replication, and deployment of multithreaded programs. Recent work has developed deterministic multiprocessor architectures as well as compiler and runtime systems that enforce determinism in current hardware. Such work has incidentally imposed strong memory-ordering properties.  Historically, memory ordering has been relaxed in favor of higher performance in shared memory multiprocessors and, interestingly, determinism exacerbates the cost of strong memory ordering.  Consequently, we argue that relaxed memory ordering is vital to achieving faster deterministic execution. </p><p>This paper introduces RCDC, a deterministic multiprocessor architecture that takes advantage of relaxed memory orderings to provide high-performance deterministic execution with low hardware complexity. RCDC has two key innovations: a hybrid HW/SW approach to enforcing determinism; and a new deterministic execution strategy that leverages data-race-free-based memory models (e.g., the models for Java and C++) to improve performance and scalability without sacrificing determinism, even in the presence of races. In our hybrid HW/SW approach, the only hardware mechanisms required are software-controlled store buffering and support for precise instruction counting; we do not require speculation. A runtime system uses these mechanisms to enforce determinism  for arbitrary programs.</p> <p>We evaluate RCDC using PARSEC benchmarks and show that relaxing memory ordering leads to performance and scalability close to nondeterministic execution without requiring any form of speculation. We also compare our new execution strategy to one based on TSO (total-store-ordering) and show that some applications benefit significantly from the extra relaxation. We also evaluate a software-only implementation of our new deterministic execution strategy.</p></div></li>

<li class="pubItem"><a id="determinismhammer"></a><a class="pubTitle noScreen" href="https://sites.google.com/site/2ndwodet/program/wodet11-final6.pdf?attredirects=0">The Deterministic Execution Hammer: How Well Does it Actually Pound Nails?</a><span class="pubTitle noPrint">The Deterministic Execution Hammer: How Well Does it Actually Pound Nails?</span>
<div class="pubAuthors"><a href="http://homes.cs.washington.edu/~tbergan/" class="pubAuthor">Tom Bergan</a>, <a href="http://www.cis.upenn.edu/~devietti/" class="pubAuthor">Joseph Devietti</a>, <a href="http://homes.cs.washington.edu/~nhunt/" class="pubAuthor">Nicholas Hunt</a> and <a href="http://homes.cs.washington.edu/~luisceze/" class="pubAuthor">Luis Ceze</a></div>
<div><span class="pubConference">Workshop on Determinism and Correctness in Parallel Programming</span><span class="pubConferenceAbbreviation"> (WoDet '11)</span>, held in conjunction with ASPLOS '11, March 2011
</div>
<div class="noPrint"><span class="pubMediaLink">[<a data-toggle="collapse" data-target="#abstractDivdeterminismhammer">abstract</a>]</span><span class="pubMediaLink">[<a href="https://sites.google.com/site/2ndwodet/program/wodet11-final6.pdf?attredirects=0" class="pubLinkToPaper">paper</a>]</span><span class="pubMediaLink">[slides: <a href="http://homes.cs.washington.edu/~tbergan/slides/wodet11-hammer-slides.key">key</a> <a href="http://homes.cs.washington.edu/~tbergan/slides/wodet11-hammer-slides.pdf">pdf</a>]</span></div>
<div id="abstractDivdeterminismhammer" class="pubAbstract collapse"><p>This paper takes a critical look at the benefits provided by state-of-the-art deterministic execution techniques. Specifically, we look at four applications of deterministic execution: debugging, fault-tolerant replication, testing, and security. For each application, we discuss what an ideal system would provide, and then look at how deterministic systems compare to the ideal. Further, we discuss alternative approaches, not involving determinism, and we judge whether or not these alternatives are more suitable. Along the way, we identify open questions and suggest future work. </p><p>Ultimately, we find that there are competitive alternatives to determinism for debugging and replicating multithreaded programs; that determinism has high, though unproven, potential to improve testing; and that determinism has distinct security benefits in eliminating some covert timing channels. Furthermore, determinism is a unified solution for all four applications: this confers a distinct advantage over point solutions that do not compose well with one another.</p></div></li>

</ul>


      
    </div>

    <div class="span2"></div>
      
  </div><!-- end body div -->
  
</div><!-- end container div -->

</body>
</html>
