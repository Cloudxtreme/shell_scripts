<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>talloc: The talloc string functions.</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.3 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.html"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.html"><span>Modules</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>The talloc string functions.<br/>
<small>
[<a class="el" href="group__talloc.html">The talloc API</a>]</small>
</h1>
<p>talloc string allocation and manipulation functions.  
<a href="#_details">More...</a></p>
<table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__string.html#gaca866b920e3b876b00946027244cdd8f">talloc_strdup</a> (const void *t, const char *p)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Duplicate a string into a talloc chunk.  <a href="#gaca866b920e3b876b00946027244cdd8f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__string.html#ga27ce7e41cadde877157b1456f629ca3d">talloc_strdup_append</a> (char *s, const char *a)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Append a string to given string.  <a href="#ga27ce7e41cadde877157b1456f629ca3d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__string.html#ga2b2413835aa49f303755f03fcdbf71ff">talloc_strdup_append_buffer</a> (char *s, const char *a)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Append a string to a given buffer.  <a href="#ga2b2413835aa49f303755f03fcdbf71ff"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__string.html#gade5e000346fc18848e33a8a2dd4c38ef">talloc_strndup</a> (const void *t, const char *p, size_t n)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Duplicate a length-limited string into a talloc chunk.  <a href="#gade5e000346fc18848e33a8a2dd4c38ef"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__string.html#gafc991e1f5959bd60999492c9bd3bf173">talloc_strndup_append</a> (char *s, const char *a, size_t n)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Append at most n characters of a string to given string.  <a href="#gafc991e1f5959bd60999492c9bd3bf173"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__string.html#ga33df1e6b76551e55e57891dd76d0cca9">talloc_strndup_append_buffer</a> (char *s, const char *a, size_t n)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Append at most n characters of a string to given buffer.  <a href="#ga33df1e6b76551e55e57891dd76d0cca9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__string.html#gac94a5cdf486fbd81bea0b48ac165366d">talloc_vasprintf</a> (const void *t, const char *fmt, va_list ap)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Format a string given a va_list.  <a href="#gac94a5cdf486fbd81bea0b48ac165366d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__string.html#ga4993a1c46a30e1608488dd3b1bc50d56">talloc_vasprintf_append</a> (char *s, const char *fmt, va_list ap)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Format a string given a va_list and append it to the given destination string.  <a href="#ga4993a1c46a30e1608488dd3b1bc50d56"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__string.html#gac69f194ea307d7389966661fce974c69">talloc_vasprintf_append_buffer</a> (char *s, const char *fmt, va_list ap)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Format a string given a va_list and append it to the given destination buffer.  <a href="#gac69f194ea307d7389966661fce974c69"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__string.html#ga91c7fe3bf2110cbb91eed6d9def4e4cc">talloc_asprintf</a> (const void *t, const char *fmt,...)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Format a string.  <a href="#ga91c7fe3bf2110cbb91eed6d9def4e4cc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__string.html#ga9f67a37202f3801a43cc0543a29fbb40">talloc_asprintf_append</a> (char *s, const char *fmt,...)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Append a formatted string to another string.  <a href="#ga9f67a37202f3801a43cc0543a29fbb40"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">char *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__talloc__string.html#gab5adbed226009ce88e2fa72ac68d68e8">talloc_asprintf_append_buffer</a> (char *s, const char *fmt,...)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Append a formatted string to another string.  <a href="#gab5adbed226009ce88e2fa72ac68d68e8"></a><br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>talloc string allocation and manipulation functions. </p>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga91c7fe3bf2110cbb91eed6d9def4e4cc"></a><!-- doxytag: member="talloc.h::talloc_asprintf" ref="ga91c7fe3bf2110cbb91eed6d9def4e4cc" args="(const void *t, const char *fmt,...)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* talloc_asprintf </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>...</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Format a string. </p>
<p>This function is the talloc equivalent of the C library function asprintf(3).</p>
<p>This functions sets the name of the new pointer to the new string. This is equivalent to:</p>
<div class="fragment"><pre class="fragment">      <a class="code" href="group__talloc.html#ga204ed205d6b1524c46f12541d5eca686" title="Assign a name to a talloc chunk.">talloc_set_name_const</a>(ptr, ptr)
</pre></div><dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>t</em>&nbsp;</td><td>The talloc context to hang the result off.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>fmt</em>&nbsp;</td><td>The format string.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>...</em>&nbsp;</td><td>The parameters used to fill fmt.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The formatted string, NULL on error. </dd></dl>

</div>
</div>
<a class="anchor" id="ga9f67a37202f3801a43cc0543a29fbb40"></a><!-- doxytag: member="talloc.h::talloc_asprintf_append" ref="ga9f67a37202f3801a43cc0543a29fbb40" args="(char *s, const char *fmt,...)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* talloc_asprintf_append </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>...</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Append a formatted string to another string. </p>
<p>This function appends the given formatted string to the given string. Use this variant when the string in the current talloc buffer may have been truncated in length.</p>
<p>This functions sets the name of the new pointer to the new string. This is equivalent to:</p>
<div class="fragment"><pre class="fragment">      <a class="code" href="group__talloc.html#ga204ed205d6b1524c46f12541d5eca686" title="Assign a name to a talloc chunk.">talloc_set_name_const</a>(ptr, ptr)
</pre></div><p>If <code>s == NULL</code> then new context is created.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>s</em>&nbsp;</td><td>The string to append to.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>fmt</em>&nbsp;</td><td>The format string.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>...</em>&nbsp;</td><td>The parameters used to fill fmt.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The formatted string, NULL on error. </dd></dl>

</div>
</div>
<a class="anchor" id="gab5adbed226009ce88e2fa72ac68d68e8"></a><!-- doxytag: member="talloc.h::talloc_asprintf_append_buffer" ref="gab5adbed226009ce88e2fa72ac68d68e8" args="(char *s, const char *fmt,...)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* talloc_asprintf_append_buffer </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">&nbsp;</td>
          <td class="paramname"> <em>...</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Append a formatted string to another string. </p>
<p>This is a more efficient version of <a class="el" href="group__talloc__string.html#ga9f67a37202f3801a43cc0543a29fbb40" title="Append a formatted string to another string.">talloc_asprintf_append()</a>. It determines the length of the destination string by the size of the talloc context.</p>
<p>Use this very carefully as it produces a different result than <a class="el" href="group__talloc__string.html#ga9f67a37202f3801a43cc0543a29fbb40" title="Append a formatted string to another string.">talloc_asprintf_append()</a> when a zero character is in the middle of the destination string.</p>
<div class="fragment"><pre class="fragment">      <span class="keywordtype">char</span> *str_a = <a class="code" href="group__talloc__string.html#gaca866b920e3b876b00946027244cdd8f" title="Duplicate a string into a talloc chunk.">talloc_strdup</a>(NULL, <span class="stringliteral">&quot;hello world&quot;</span>);
      <span class="keywordtype">char</span> *str_b = <a class="code" href="group__talloc__string.html#gaca866b920e3b876b00946027244cdd8f" title="Duplicate a string into a talloc chunk.">talloc_strdup</a>(NULL, <span class="stringliteral">&quot;hello world&quot;</span>);
      str_a[5] = str_b[5] = <span class="charliteral">&#39;\0&#39;</span>

      <span class="keywordtype">char</span> *app = <a class="code" href="group__talloc__string.html#ga9f67a37202f3801a43cc0543a29fbb40" title="Append a formatted string to another string.">talloc_asprintf_append</a>(str_a, <span class="stringliteral">&quot;%s&quot;</span>, <span class="stringliteral">&quot;, hello&quot;</span>);
      <span class="keywordtype">char</span> *buf = <a class="code" href="group__talloc__string.html#ga2b2413835aa49f303755f03fcdbf71ff" title="Append a string to a given buffer.">talloc_strdup_append_buffer</a>(str_b, <span class="stringliteral">&quot;%s&quot;</span>, <span class="stringliteral">&quot;, hello&quot;</span>);

      printf(<span class="stringliteral">&quot;%s\n&quot;</span>, app); <span class="comment">// hello, hello (app = &quot;hello, hello&quot;)</span>
      printf(<span class="stringliteral">&quot;%s\n&quot;</span>, buf); <span class="comment">// hello (buf = &quot;hello\0world, hello&quot;)</span>
</pre></div><p>If <code>s == NULL</code> then new context is created.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>s</em>&nbsp;</td><td>The string to append to</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>fmt</em>&nbsp;</td><td>The format string.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>...</em>&nbsp;</td><td>The parameters used to fill fmt.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The formatted string, NULL on error.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__talloc__string.html#ga91c7fe3bf2110cbb91eed6d9def4e4cc" title="Format a string.">talloc_asprintf()</a> </dd>
<dd>
<a class="el" href="group__talloc__string.html#ga9f67a37202f3801a43cc0543a29fbb40" title="Append a formatted string to another string.">talloc_asprintf_append()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="gaca866b920e3b876b00946027244cdd8f"></a><!-- doxytag: member="talloc.h::talloc_strdup" ref="gaca866b920e3b876b00946027244cdd8f" args="(const void *t, const char *p)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* talloc_strdup </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>p</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Duplicate a string into a talloc chunk. </p>
<p>This function is equivalent to:</p>
<div class="fragment"><pre class="fragment">      ptr = <a class="code" href="group__talloc.html#ga7c67e6decbf19c39d95c5db277327c6f" title="Untyped allocation.">talloc_size</a>(ctx, strlen(p)+1);
      <span class="keywordflow">if</span> (ptr) memcpy(ptr, p, strlen(p)+1);
</pre></div><p>This functions sets the name of the new pointer to the passed string. This is equivalent to:</p>
<div class="fragment"><pre class="fragment">      <a class="code" href="group__talloc.html#ga204ed205d6b1524c46f12541d5eca686" title="Assign a name to a talloc chunk.">talloc_set_name_const</a>(ptr, ptr)
</pre></div><dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>t</em>&nbsp;</td><td>The talloc context to hang the result off.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>p</em>&nbsp;</td><td>The string you want to duplicate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The duplicated string, NULL on error. </dd></dl>

</div>
</div>
<a class="anchor" id="ga27ce7e41cadde877157b1456f629ca3d"></a><!-- doxytag: member="talloc.h::talloc_strdup_append" ref="ga27ce7e41cadde877157b1456f629ca3d" args="(char *s, const char *a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* talloc_strdup_append </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>a</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Append a string to given string. </p>
<p>The destination string is reallocated to take <code>strlen(s) + strlen(a) + 1</code> characters.</p>
<p>This functions sets the name of the new pointer to the new string. This is equivalent to:</p>
<div class="fragment"><pre class="fragment">      <a class="code" href="group__talloc.html#ga204ed205d6b1524c46f12541d5eca686" title="Assign a name to a talloc chunk.">talloc_set_name_const</a>(ptr, ptr)
</pre></div><p>If <code>s == NULL</code> then new context is created.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>s</em>&nbsp;</td><td>The destination to append to.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>a</em>&nbsp;</td><td>The string you want to append.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The concatenated strings, NULL on error.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__talloc__string.html#gaca866b920e3b876b00946027244cdd8f" title="Duplicate a string into a talloc chunk.">talloc_strdup()</a> </dd>
<dd>
<a class="el" href="group__talloc__string.html#ga2b2413835aa49f303755f03fcdbf71ff" title="Append a string to a given buffer.">talloc_strdup_append_buffer()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga2b2413835aa49f303755f03fcdbf71ff"></a><!-- doxytag: member="talloc.h::talloc_strdup_append_buffer" ref="ga2b2413835aa49f303755f03fcdbf71ff" args="(char *s, const char *a)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* talloc_strdup_append_buffer </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>a</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Append a string to a given buffer. </p>
<p>This is a more efficient version of <a class="el" href="group__talloc__string.html#ga27ce7e41cadde877157b1456f629ca3d" title="Append a string to given string.">talloc_strdup_append()</a>. It determines the length of the destination string by the size of the talloc context.</p>
<p>Use this very carefully as it produces a different result than <a class="el" href="group__talloc__string.html#ga27ce7e41cadde877157b1456f629ca3d" title="Append a string to given string.">talloc_strdup_append()</a> when a zero character is in the middle of the destination string.</p>
<div class="fragment"><pre class="fragment">      <span class="keywordtype">char</span> *str_a = <a class="code" href="group__talloc__string.html#gaca866b920e3b876b00946027244cdd8f" title="Duplicate a string into a talloc chunk.">talloc_strdup</a>(NULL, <span class="stringliteral">&quot;hello world&quot;</span>);
      <span class="keywordtype">char</span> *str_b = <a class="code" href="group__talloc__string.html#gaca866b920e3b876b00946027244cdd8f" title="Duplicate a string into a talloc chunk.">talloc_strdup</a>(NULL, <span class="stringliteral">&quot;hello world&quot;</span>);
      str_a[5] = str_b[5] = <span class="charliteral">&#39;\0&#39;</span>

      <span class="keywordtype">char</span> *app = <a class="code" href="group__talloc__string.html#ga27ce7e41cadde877157b1456f629ca3d" title="Append a string to given string.">talloc_strdup_append</a>(str_a, <span class="stringliteral">&quot;, hello&quot;</span>);
      <span class="keywordtype">char</span> *buf = <a class="code" href="group__talloc__string.html#ga2b2413835aa49f303755f03fcdbf71ff" title="Append a string to a given buffer.">talloc_strdup_append_buffer</a>(str_b, <span class="stringliteral">&quot;, hello&quot;</span>);

      printf(<span class="stringliteral">&quot;%s\n&quot;</span>, app); <span class="comment">// hello, hello (app = &quot;hello, hello&quot;)</span>
      printf(<span class="stringliteral">&quot;%s\n&quot;</span>, buf); <span class="comment">// hello (buf = &quot;hello\0world, hello&quot;)</span>
</pre></div><p>If <code>s == NULL</code> then new context is created.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>s</em>&nbsp;</td><td>The destination buffer to append to.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>a</em>&nbsp;</td><td>The string you want to append.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The concatenated strings, NULL on error.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__talloc__string.html#gaca866b920e3b876b00946027244cdd8f" title="Duplicate a string into a talloc chunk.">talloc_strdup()</a> </dd>
<dd>
<a class="el" href="group__talloc__string.html#ga27ce7e41cadde877157b1456f629ca3d" title="Append a string to given string.">talloc_strdup_append()</a> </dd>
<dd>
<a class="el" href="group__talloc__array.html#ga857f326bec12677992efb97ba44b52b3" title="Get the number of elements in a talloc&#39;ed array.">talloc_array_length()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="gade5e000346fc18848e33a8a2dd4c38ef"></a><!-- doxytag: member="talloc.h::talloc_strndup" ref="gade5e000346fc18848e33a8a2dd4c38ef" args="(const void *t, const char *p, size_t n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* talloc_strndup </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>p</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"> <em>n</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Duplicate a length-limited string into a talloc chunk. </p>
<p>This function is the talloc equivalent of the C library function strndup(3).</p>
<p>This functions sets the name of the new pointer to the passed string. This is equivalent to:</p>
<div class="fragment"><pre class="fragment">      <a class="code" href="group__talloc.html#ga204ed205d6b1524c46f12541d5eca686" title="Assign a name to a talloc chunk.">talloc_set_name_const</a>(ptr, ptr)
</pre></div><dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>t</em>&nbsp;</td><td>The talloc context to hang the result off.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>p</em>&nbsp;</td><td>The string you want to duplicate.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>n</em>&nbsp;</td><td>The maximum string length to duplicate.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The duplicated string, NULL on error. </dd></dl>

</div>
</div>
<a class="anchor" id="gafc991e1f5959bd60999492c9bd3bf173"></a><!-- doxytag: member="talloc.h::talloc_strndup_append" ref="gafc991e1f5959bd60999492c9bd3bf173" args="(char *s, const char *a, size_t n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* talloc_strndup_append </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"> <em>n</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Append at most n characters of a string to given string. </p>
<p>The destination string is reallocated to take <code>strlen(s) + strnlen(a, n) + 1</code> characters.</p>
<p>This functions sets the name of the new pointer to the new string. This is equivalent to:</p>
<div class="fragment"><pre class="fragment">      <a class="code" href="group__talloc.html#ga204ed205d6b1524c46f12541d5eca686" title="Assign a name to a talloc chunk.">talloc_set_name_const</a>(ptr, ptr)
</pre></div><p>If <code>s == NULL</code> then new context is created.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>s</em>&nbsp;</td><td>The destination string to append to.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>a</em>&nbsp;</td><td>The source string you want to append.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>n</em>&nbsp;</td><td>The number of characters you want to append from the string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The concatenated strings, NULL on error.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__talloc__string.html#gade5e000346fc18848e33a8a2dd4c38ef" title="Duplicate a length-limited string into a talloc chunk.">talloc_strndup()</a> </dd>
<dd>
<a class="el" href="group__talloc__string.html#ga33df1e6b76551e55e57891dd76d0cca9" title="Append at most n characters of a string to given buffer.">talloc_strndup_append_buffer()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="ga33df1e6b76551e55e57891dd76d0cca9"></a><!-- doxytag: member="talloc.h::talloc_strndup_append_buffer" ref="ga33df1e6b76551e55e57891dd76d0cca9" args="(char *s, const char *a, size_t n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* talloc_strndup_append_buffer </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&nbsp;</td>
          <td class="paramname"> <em>n</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Append at most n characters of a string to given buffer. </p>
<p>This is a more efficient version of <a class="el" href="group__talloc__string.html#gafc991e1f5959bd60999492c9bd3bf173" title="Append at most n characters of a string to given string.">talloc_strndup_append()</a>. It determines the length of the destination string by the size of the talloc context.</p>
<p>Use this very carefully as it produces a different result than <a class="el" href="group__talloc__string.html#gafc991e1f5959bd60999492c9bd3bf173" title="Append at most n characters of a string to given string.">talloc_strndup_append()</a> when a zero character is in the middle of the destination string.</p>
<div class="fragment"><pre class="fragment">      <span class="keywordtype">char</span> *str_a = <a class="code" href="group__talloc__string.html#gaca866b920e3b876b00946027244cdd8f" title="Duplicate a string into a talloc chunk.">talloc_strdup</a>(NULL, <span class="stringliteral">&quot;hello world&quot;</span>);
      <span class="keywordtype">char</span> *str_b = <a class="code" href="group__talloc__string.html#gaca866b920e3b876b00946027244cdd8f" title="Duplicate a string into a talloc chunk.">talloc_strdup</a>(NULL, <span class="stringliteral">&quot;hello world&quot;</span>);
      str_a[5] = str_b[5] = <span class="charliteral">&#39;\0&#39;</span>

      <span class="keywordtype">char</span> *app = <a class="code" href="group__talloc__string.html#gafc991e1f5959bd60999492c9bd3bf173" title="Append at most n characters of a string to given string.">talloc_strndup_append</a>(str_a, <span class="stringliteral">&quot;, hello&quot;</span>, 7);
      <span class="keywordtype">char</span> *buf = <a class="code" href="group__talloc__string.html#ga33df1e6b76551e55e57891dd76d0cca9" title="Append at most n characters of a string to given buffer.">talloc_strndup_append_buffer</a>(str_b, <span class="stringliteral">&quot;, hello&quot;</span>, 7);

      printf(<span class="stringliteral">&quot;%s\n&quot;</span>, app); <span class="comment">// hello, hello (app = &quot;hello, hello&quot;)</span>
      printf(<span class="stringliteral">&quot;%s\n&quot;</span>, buf); <span class="comment">// hello (buf = &quot;hello\0world, hello&quot;)</span>
</pre></div><p>If <code>s == NULL</code> then new context is created.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>s</em>&nbsp;</td><td>The destination buffer to append to.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>a</em>&nbsp;</td><td>The source string you want to append.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>n</em>&nbsp;</td><td>The number of characters you want to append from the string.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The concatenated strings, NULL on error.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__talloc__string.html#gade5e000346fc18848e33a8a2dd4c38ef" title="Duplicate a length-limited string into a talloc chunk.">talloc_strndup()</a> </dd>
<dd>
<a class="el" href="group__talloc__string.html#gafc991e1f5959bd60999492c9bd3bf173" title="Append at most n characters of a string to given string.">talloc_strndup_append()</a> </dd>
<dd>
<a class="el" href="group__talloc__array.html#ga857f326bec12677992efb97ba44b52b3" title="Get the number of elements in a talloc&#39;ed array.">talloc_array_length()</a> </dd></dl>

</div>
</div>
<a class="anchor" id="gac94a5cdf486fbd81bea0b48ac165366d"></a><!-- doxytag: member="talloc.h::talloc_vasprintf" ref="gac94a5cdf486fbd81bea0b48ac165366d" args="(const void *t, const char *fmt, va_list ap)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* talloc_vasprintf </td>
          <td>(</td>
          <td class="paramtype">const void *&nbsp;</td>
          <td class="paramname"> <em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">va_list&nbsp;</td>
          <td class="paramname"> <em>ap</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Format a string given a va_list. </p>
<p>This function is the talloc equivalent of the C library function vasprintf(3).</p>
<p>This functions sets the name of the new pointer to the new string. This is equivalent to:</p>
<div class="fragment"><pre class="fragment">      <a class="code" href="group__talloc.html#ga204ed205d6b1524c46f12541d5eca686" title="Assign a name to a talloc chunk.">talloc_set_name_const</a>(ptr, ptr)
</pre></div><dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>t</em>&nbsp;</td><td>The talloc context to hang the result off.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>fmt</em>&nbsp;</td><td>The format string.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ap</em>&nbsp;</td><td>The parameters used to fill fmt.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The formatted string, NULL on error. </dd></dl>

</div>
</div>
<a class="anchor" id="ga4993a1c46a30e1608488dd3b1bc50d56"></a><!-- doxytag: member="talloc.h::talloc_vasprintf_append" ref="ga4993a1c46a30e1608488dd3b1bc50d56" args="(char *s, const char *fmt, va_list ap)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* talloc_vasprintf_append </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">va_list&nbsp;</td>
          <td class="paramname"> <em>ap</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Format a string given a va_list and append it to the given destination string. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>s</em>&nbsp;</td><td>The destination string to append to.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>fmt</em>&nbsp;</td><td>The format string.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ap</em>&nbsp;</td><td>The parameters used to fill fmt.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The formatted string, NULL on error.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__talloc__string.html#gac94a5cdf486fbd81bea0b48ac165366d" title="Format a string given a va_list.">talloc_vasprintf()</a></dd></dl>
<p>Format a string given a va_list and append it to the given destination string.</p>
<p>Good for gradually accumulating output into a string buffer. Appends at the end of the string. </p>

</div>
</div>
<a class="anchor" id="gac69f194ea307d7389966661fce974c69"></a><!-- doxytag: member="talloc.h::talloc_vasprintf_append_buffer" ref="gac69f194ea307d7389966661fce974c69" args="(char *s, const char *fmt, va_list ap)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">char* talloc_vasprintf_append_buffer </td>
          <td>(</td>
          <td class="paramtype">char *&nbsp;</td>
          <td class="paramname"> <em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&nbsp;</td>
          <td class="paramname"> <em>fmt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">va_list&nbsp;</td>
          <td class="paramname"> <em>ap</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Format a string given a va_list and append it to the given destination buffer. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>s</em>&nbsp;</td><td>The destination buffer to append to.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>fmt</em>&nbsp;</td><td>The format string.</td></tr>
    <tr><td valign="top"><tt>[in]</tt>&nbsp;</td><td valign="top"><em>ap</em>&nbsp;</td><td>The parameters used to fill fmt.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>The formatted string, NULL on error.</dd></dl>
<dl class="see"><dt><b>See also:</b></dt><dd><a class="el" href="group__talloc__string.html#gac94a5cdf486fbd81bea0b48ac165366d" title="Format a string given a va_list.">talloc_vasprintf()</a></dd></dl>
<p>Format a string given a va_list and append it to the given destination buffer.</p>
<p>Always appends at the end of the talloc'ed buffer, not the end of the string. </p>

</div>
</div>
</div>
<hr class="footer"/><address style="text-align: right;"><small>Generated by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.3 </small></address>
</body>
</html>
