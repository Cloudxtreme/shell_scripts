<!DOCTYPE html>
<html
    class="desktop"
>
<head>
  <meta name="author" content="FF" />
  <meta name="email" content="webmaster@freebsdfoundation.org" />

  <title>FreeBSD Foundation Projects</title>

  <link href="/assets/application-82486c20e5a94a0db04f127d7359e57f.css" media="all" rel="stylesheet" type="text/css" />
  <script src="/assets/application-718341339c4d19656146e71535d388a7.js" type="text/javascript"></script>
  <meta content="authenticity_token" name="csrf-param" />
<meta content="JqrxHIm2roUZr2+c+aEN4s+pzcNHQECoxvcNqPMV19U=" name="csrf-token" />

  


  <link href="/favicon.ico" rel="shortcut icon" type="image/vnd.microsoft.icon" />
</head>
<body>

  <div id="headerline"></div>

<div id="container">

<div id="header">
  <div id="logo">
    <a href="/">
      <img src="/assets/logo_freebsdfoundation.png"
           alt="The FreeBSD Foundation" />
    </a>
  </div>

  <div id="donate">
    <div class="rb">
      <div class="rb_ct">
        <div class="rb_ct2">
          <a href="/donate">Donate to the Foundation</a>
        </div>
      </div>
      <div class="rb_bt rb_bgimg_red">
        <div class="rb_bt2 rb_bgimg_red"></div>
      </div>
      <div class="rb_cw rb_bg_red"></div>
      <div class="rb_bb rb_bgimg_red">
        <div class="rb_bb2 rb_bgimg_red"></div>
      </div>
    </div>

    <div id="donors" style="text-align: left;">
      <a href="/donate/sponsors">View donors list</a><br /><br />
      <!--
        <a href="/subscribe">Subscribe to Mailing List</a><br /><br />
      -->
    </div>
  </div>
</div>

<div id="nav">
  <div class="rb">
    <div class="rb_ct">
      <div class="rb_ct2">
        <ul>
          <li><a href="/">Home</a></li>
          <li><a href="/about">About</a></li>
          <li><a href="/press">News</a></li>
          <li><a href="/activities">Activities</a></li>
          <li><a href="/donate">Donations</a></li>

          <li><a href="/documents">Documents</a></li>
          <li><a href="/testimonials">Testimonials</a></li>
          <li><a href="http://freebsdfoundation.blogspot.com/">Blog</a></li>      
          <li><a href="/faqs">FAQs</a></li>
          <li><a href="/java">Java Info</a></li>
          <li class="last-child"><a href="/contact">Contact</a></li>
        </ul>
      </div>
    </div>
    <div class="rb_bt rb_bgimg_grey">
      <div class="rb_bt2 rb_bgimg_grey"></div>
    </div>
    <div class="rb_cw rb_bg_grey"></div>
    <div class="rb_bb rb_bgimg_grey">
      <div class="rb_bb2 rb_bgimg_grey"></div>
    </div>
  </div>
</div>


<div id="contentcontainer">

  <div id="sidewrap">
    <div id="sidenav">
        <ul>
    <li><a href="/activities">Activities</a></li>
    <li><a href="/projects">Projects</a></li>
  </ul>

    </div>
    
  </div>

<div id="contentwrap">
<div id="content">




      <h1>FreeBSD Foundation Funded Projects</h1>
      <p>The projects listed on this page are funded by donations given
      to The FreeBSD Foundation. There are many on-going projects being
      worked on by volunteers, companies, etc. for the FreeBSD Project. 
      To find out more about these projects please visit the Project's 
      website at:
      </p>
      <p>
      <a href="http://www.freebsd.org/">http://www.freebsd.org/</a>
      </p>

      <p>
      To help fund future projects please consider making a donation to the foundation.
      You can do this by visiting:
      </p>

      <p>
      <a href="http://www.freebsdfoundation.org/donate/">http://www.freebsdfoundation.org/donate/</a>
      </p>

     <h2><a name="auditdistd">Implementing auditdistd daemon</a></h2>
     <p>Project Status: Completed</p>
     <p>FreeBSD Developer: Pawe&#322; Jakub Dawidek</p>

     <p>
      The FreeBSD audit facility provides fine-grained, configurable logging
      of security-relevant events.  One of the key purposes of logging
      security events is postmortem analysis in case of system compromise.
      Currently the kernel can push audit records directly into a file or make
      them available through /dev/auditpipe device.  Because audit logs are
      stored locally by the kernel, an attacker has access to them once the
      system is compromised, which enables him to remove trails of his
      activity.
     </p>

     <p>
      The auditdistd project goal is to securely and reliabily distribute
      audit records over the TCP/IP network from a local auditdistd daemon to
      a remote auditdistd daemon. In case of source system compromise,
      attacker's activity can be analysed using data collected by the remote
      system, as only remote system's audit logs can be trusted then.
     </p>

     <p>
      This project was completed in February 2012.
     </p>

     <h2><a name="IPv6Analysis">Analyzing the Performance of FreeBSD's IPv6 Stack</a></h2>
     <p>Project Status: Completed</p>
     <p>FreeBSD Developer: Bjoern Zeeb</p><p>
      The FreeBSD Foundation is pleased to announce that it has awarded Bjoern 
      Zeeb a grant to analyze the performance of FreeBSD's IPv6 stack. This 
      project is jointly sponsored with iXsystems.
     </p>

     <p>
      Last year, Bjoern improved FreeBSD IPv6 support, allowing the 
      possibility to build a FreeBSD system without IPv4 support. This project 
      will continue on this work and concentrate on the kernel, looking at the 
      performance of FreeBSD's IPv6 stack.  Various parties have seen lower 
      performance when comparing IPv4 to IPv6 on FreeBSD.  While the numbers 
      seem to differ between releases the causes are mostly unknown.
     </p>

     <p>
      The project will carry out a detailed performance analysis starting with 
      benchmarking IPv6 to IPv4 to get up-to-date numbers to better understand 
      where we are.  It will then continue to identify the origins of 
      differences in performance, and where possible, directly address them or 
      identify areas of future work.  Having initial benchmark numbers will 
      allow changes to be evaluated by re-running the measurements and 
      quantifying the improvements.
     </p>

     <p>
      "As the world starts to roll out IPv6 and traffic patterns shift from 
      IPv4 to IPv6, not only correctness and stability, but also feature 
      parity and performance matter," said developer Bjoern Zeeb. "Getting the 
      performance numbers aligning with IPv4 will ensure that our users will 
      not need more resources when using IPv6."
     </p>

     <h2><a name="diffuse">DIFFUSE for FreeBSD</a></h2>
     <p>Project Status: Completed</p>
     <p>FreeBSD Developer: Swinburne University of Technology's Centre for Advanced Internet Architectures</p>

     <p>
      DIFFUSE (Distributed Firewall and Flow-shaper Using Statistical
      Evidence) is an extension to the FreeBSD IPFW firewall subsystem
      developed by <a href="http://www.caia.swin.edu.au/">CAIA</a>. It allows
      IPFW to classify traffic based on statistical properties of flows being
      observed in realtime, and instantiate network actions across a
      distributed set of "action nodes" for particular flows if required.
     </p>

     <p>
      This project will tidy up and integrate the
      existing<a href="http://www.caia.swin.edu.au/urp/diffuse/">DIFFUSE
      prototype</a>  into FreeBSD, and incorporate a number of important new
      features. Integration of DIFFUSE into FreeBSD will increase FreeBSD's
      utility to designers and implementers of FreeBSD-based networking
      infrastructure.
     </p>

     <p>
      Network architects frequently require the ability to classify different
      traffic types flowing across a network, typically using packet
      inspection capabilities of base system tools such as ipfw and pf.
      Traffic classification then enables the provision of customized service
      levels to different traffic types (such as priority packet queuing and
      forwarding, or allocation of specific bandwidth guarantees).
     </p>

     <p>
      DIFFUSE uses machine learning techniques to enable robust and efficient
      classification of IP traffic flows based on their unique statistical
      properties in addition to traditional inspection of packet header or
      payload contents. DIFFUSE also allows traffic classification to occur in
      one place (e.g. in the core of a network) and trigger traffic shaping
      and differentiation elsewhere (e.g. at the edges of a network). DIFFUSE
      has applications in ISP, residential broadband and large corporate
      network scenarios to name a few.
    </p>

     <p>
      The project will completed in October 2011.
     </p>

     <h2><a name="xlocale">Implementing xlocale APIs</a></h2>
     <p>Project Status: Completed</p>
     <p>FreeBSD Developer: David Chisnall</p><p>

     <p>
      The C standard library (libc) is one of the most important parts of a UNIX 
      system as most programs interact with the kernel through interfaces written 
      in C.  Porting code between platforms with similar libc implementations is 
      trivial and if something is supported by libc, higher-level languages can 
      use it without being reimplemented.
     </p>

     <p>
      Over time, the C language has slowly evolved to modern multicore systems, 
      but there are still some places that are problematic.  One of these is 
      localization as  C began originally had no localization support. FreeBSD 
      libc and Darwin libc (used by Mac OS X) are similar, making it much easier 
      to port code from OS X to FreeBSD than from OS X to Linux. The libc used 
      by OS X supports a set of extended locale functions (xlocale) that allow 
      locale to be set on a per-thread basis.
     </p>

     <p>
      Additionally, libc++, from the LLVM project, was originally developed on 
      Darwin, so it uses xlocale for most of the C++ locale support.  The lack 
      of this support is the primary obstacle to porting it to FreeBSD.
     </p>

     <p>
      Once xlocale is supported in FreeBSD libc, we can port libc++ to FreeBSD, 
      giving us an MIT-licensed C++11 standard library implementation.  This, in 
      conjunction with Clang and libcxxrt, means that the entire C++ stack in 
      FreeBSD will be free of any GNU code.  This leaves the linker as the only 
      significant obstacle to a GPL-free FreeBSD 10.
     </p>

     <p>
      The project completed in September 2011.
     </p>

     <h2><a name="Melbourne">Feed-Forward Clock Synchronization Algorithms</a></h2>
     <p>Project Status: Completed</p>
     <p>FreeBSD Developer: University of Melbourne</p>
     <p>
      The FreeBSD Foundation is pleased to announce that Julien Ridoux 
      and Darryl Veitch at the University of Melbourne have been awarded 
      a grant to implement support of feed-forward clock synchronization algorithms.
     </p>

     <p>
      The Network Time Protocol (NTP) is widely used for synchronization over 
      the network and the ntpd daemon is the current reference synchronization 
      algorithm. The system clock in FreeBSD is currently designed with ntpd 
      in mind, leading to strong feedback coupling between the kernel and the 
      synchronization daemon.
     </p>

     <p>
      The <a href="http://www.cubinlab.ee.unimelb.edu.au/radclock/">RADclock</a>
      is an example of an alternative class of synchronization algorithms based 
      on feed-forward principles. This project will provide the core support 
      for feed-forward algorithms, so that alternatives to ntpd can be 
      developed and tested. The central motivation for this is the strong 
      potential of such approaches for highly robust and accurate synchronization.
     </p>

     <p>
       Beyond this, virtualization is one of the next major challenges faced by 
       time keeping systems. The current feedback synchronization model is complex 
       and introduces its own dynamics, an approach that is not suited to the 
       requirements of virtualization. Feed-forward based synchronization offers 
       a cleaner and simpler approach, which is capable of providing accurate 
       time keeping over live migration of virtual machines.
      </p>

      <p>
       This project completed in September 2011.
      </p>

      <h2><a name="Swinburne">Five New TCP Congestion Control Algorithms</a></h2>
      <p>Project Status: Completed</p>
      <p>FreeBSD Developer: Swinburne University</p>
      <p>
       The FreeBSD Foundation is pleased to announce that Swinburne University
       of Technology's Centre for Advanced Internet Architectures has been awarded
       a grant to implement Five new TCP Congestion Control Algorithms in FreeBSD.
      </p>

      <p>
       Correctly functioning congestion control (CC) is crucial to the
       efficient operation of the Internet and IP networks in general. CC
       dynamically balances a flow's throughput against the inferred impact on
       the network, lowering throughput to protect the network as required.
      </p>

      <p>
       The FreeBSD operating system's TCP stack currently utilizes the defacto
       standard NewReno loss-based CC algorithm, which has known problems
       coping with many aspects of modern data networks like lossy or large
       bandwidth/delay paths. There is significant and ongoing work both in the
       research community and industry to address CC related problems, with a
       particular focus on TCP because of its ubiquitous deployment and use.
      </p>

      <p>
       Swinburne University of Technology's ongoing work with FreeBSD's TCP
       stack and congestion control implementation has progressively matured.
       This project aims to refine our prototypes and integrate them into FreeBSD.
      </p>

      <p>
       The project completed in March 2011.
      </p>


      <h2><a name="Kostik">GEM, KMS, and DRI Support for Intel Drivers</a></h2>
      <p>Project Status: Completed</p>
      <p>FreeBSD Developer: Konstantin Belousov</p>

      <p>
       The FreeBSD Foundation is pleased to announce that Konstantin Belousov
       has been awarded a grant to implement support of GEM, KMS, and DRI for 
       Intel Drivers. This project is being co-sponsored by iXsystems.
      </p>

      <p>
       The project is to implement GEM, port KMS, and write new DRI drivers for 
       Intel Graphics, including the latest Sandy Bridge generation of integrated 
       graphic units. The work should allow the latest Intel open-source driver 
       to run on FreeBSD, expanding the range of hardware  where FreeBSD is suitable 
       for the desktop.
      </p>

      <p>
       "The Foundation's sponsored project will allow me to spend much more time 
       on this interesting work, and hopefully resolve the big issue for continuing 
       use of FreeBSD on the desktop," said Konstantine.
      </p>

      <p>
       "Adding support for GEM/KMS will allow both FreeBSD and PC-BSD to run with 
       enhanced native graphic support on forthcoming advanced architectures with 
       integrated, 3d accelerated graphical capabilities," says Matt Olander, Chief 
       Technology Officer at iXsystems, Inc. "FreeBSD has long been dominant in 
       the server market and this is one more step towards making FreeBSD a complete 
       platform for netbooks, laptops, desktops, and servers. We are very pleased 
       to be a part of this project."
      </p>

      <p>
       Konstantine is a software developer, living in Kiev, Ukraine. He was given
       a src commit bit in 2006, and since then has spent most of his free time 
       on the OS, making bug fixes and implementing things he considers interesting. 
       He currently is also serving the project as release engineer and core team member.
      </p>

      <p>
       This project was completed in August 2011.
      </p>    

      <h2><a name="Bjoern">IPv6 Support in FreeBSD and PC-BSD</a></h2>
      <p>Project Status: Completed</p>
      <p>FreeBSD Developer: Bjoern Zeeb</p>

      <p>The FreeBSD Foundation is pleased to announce that it has awarded
       Bjoern Zeeb a grant to improve the maturity of IPv6 support in FreeBSD 
       and PC-BSD. This project is jointly sponsored with iXsystems.
      </p>

      <p>
       FreeBSD's KAME-based reference implementation of IPv6 first appeared 
       in FreeBSD 4.0, and can be found in a broad range of FreeBSD-derived 
       commercial products. To date, IPv6 has been an optionally configured 
       feature present in the default FreeBSD kernel; however, IPv6 
       configuration has implied configuration of IPv4. With much "IPv6-ready" 
       application software relying on dual-stack behavior, broken IPv6 
       applications go unnoticed. Adding support for an IPv6 kernel without 
       IPv4 will make FreeBSD and PC-BSD an ideal test and development 
       platform for both open source and proprietary IPv6-aware application software.
      </p>

      <p>
       "Narrowing down the code base to not rely on legacy IP will help us to 
       identify OS and application components requiring improvement to work well 
       in an IPv6 environment. This project will help to ensure a bright IPv6 
       future, as FreeBSD is used throughout the Internet: root name servers, 
       storage appliances, routers, firewalls, TVs, desktop and mobile systems, 
       and many of the world's busiest web sites," said Mr. Zeeb. FreeBSD 
       Foundation director and FreeBSD core team member Robert Watson described 
       the project as critical to the future of FreeBSD, "Bjoern's work will 
       not only improve the maturity of our IPv6 implementation, but also 
       motivate improvement of applications used in million of deployed FreeBSD 
       and FreeBSD-derived systems." The project will also improve the quality 
       and performance of FreeBSD's IPv6 stack.
      </p>

      <p>
       Bjoern Zeeb is a consultant based in Germany and has been an active FreeBSD 
       committer since 2004. He is currently also a member of the FreeBSD Security 
       and Release Engineering teams, and was recently awarded the Itojun Service 
       Award for his work on IPv6 in FreeBSD.
      </p>

      <p>
       This project was completed in June 2011.
      </p>    
  
      <h2><a name="Shteryana">BSNMP Improvements Project</a></h2>
      <p>Project Status: Completed</p>
      <p>FreeBSD Developer: Shteryana Shopova</p>

	<p>
	The FreeBSD Foundation is pleased to announce that Shteryana
	Shopova has been awarded a grant to make improvements to BSNMP.
	</p>

	<p>
	This project includes several enhancements to the existing FreeBSD
	SNMP framework, including SNMPv3-compliant user authentication, packet
	encryption and view-based access control. In addition, the project
	also includes a new module that will allow full SNMP management and
	monitoring of the FreeBSD wireless networking stack. When the
	project is completed, FreeBSD should be the OS of choice when building
	open source-based embedded wireless appliances due to the advanced
	capabilities of its wireless network stack, and the light-weight,
	secure and complete management solution that bsnmpd(1) will provide
	out of the box. Existing FreeBSD installations that use bsnmpd(1) for
	monitoring will also benefit from the added security and finer-grained
	access-control to SNMP data.
	</p>	

	<p>
	"SNMP is the defacto standard for network monitoring," said Shteryana
	Shopova, FreeBSD developer. She also added, "SNMP is used
	everywhere - in network servers, switches,  routers, firewalls,
	workstations, ip phones, printers, UPSs, all sorts of embedded
	appliances. I am happy to have the opportunity to work on several
	additions to bsnmpd(1) that have been requested by the FreeBSD
	community."
	</p>

	<p>
	This project was completed in December 2010.
	</p>

	<h2><a name="Edward">Resource Containers Project</a></h2>
        <p>Project Status: Completed</p>
        <p>FreeBSD Developer: Edward Tomasz Napierala</p>

	<p>
	Edward Tomasz Napierala has been awarded a grant to implement resource
	containers and a simple per-jail resource limits mechanism.
	</p>

	<p>
	Unlike Solaris zones, the current implementation of FreeBSD Jails does
	not provide per-jail resource limits. As a result, users are often forced
	to replace jails with other virtualization mechanisms. The goal of this
	project is to create a single, unified framework for controlling resource
	utilisation, and to use that framework to implement per-jail resource limits.
	In the future, the same framework might be used to implement more sophisticated
	resource controls, such as Hierarchical Resource Limits, or to implement
	mechanisms similar to AIX WLM. It could also be used to provide precise
	resource usage accounting for administrative or billing purposes.
	</p>

	<p>
	"It's great that the Foundation decided to fund this project", Edward noted.
	"It will make jail-based virtualization a much better choice in many scenarios,
	for example for Virtual Private Server providers."
	</p>

	<p>
	This project has completed
	</p>


	<h2><a name="Max">DAHDI FreeBSD driver port</a></h2>
      <p>Project Status: Completed</p>
      <p>FreeBSD Developer: Max Khon</p>

	<p>
	Max Khon has been awarded a grant to finish the DAHDI FreeBSD driver port.
	</p>

	<p>
	The purpose of DAHDI/FreeBSD project is to make it possible to use
	FreeBSD as a base system for software PBX solutions.
	</p>

	<p>
	DAHDI (Digium/Asterisk Hardware Device Interface) is an open-source
	device driver framework and a set of HW drivers for E1/T1, ISDN digital
	and FXO/FXS analog cards (http://www.asterisk.org/dahdi/). Asterisk is
	one of the most popular open-source software PBX solutions
	(http://www.asterisk.org/).
	</p>

	<p>
	The project includes porting DAHDI framework and HW drivers for E1/T1,
	FXO/FXS analog and ISDN digital cards to FreeBSD. This also includes
	TDMoE support, software and HW echo cancellation (Octasic, VPMADT032)
	and HW transcoding support (TC400B). The work is ongoing in the official
	DAHDI SVN repository with the close collaboration with DAHDI folks at
	Digium.
	</p>

	<p>
        Currently, most of the DAHDI bits have been ported, including the DAHDI
        framework itself, HW drivers, TDMoE drivers, drivers for software and HW
        echo cancellation (Octasic, VPMADT032) and HW transcoding (TC400B). The
        project is hosted in the <a href="http://svn.digium.com/svn/dahdi/freebsd/">official DAHDI SVN repository</a>. 
        </p>

        <p>
        <a href="http://www.freshports.org/misc/dahdi/">misc/dahdi</a> in the FreeBSD ports collection now contains the most recent bits
        of DAHDI/FreeBSD and also some stuff that is not available in DAHDI/FreeBSD SVN
        due to licensing and copyright restrictions. These include the OSLEC echo canceller
        and the experimental zaphfc driver.
       </p>

	<p>
	This project was completed in September 2010.
	</p>


	<h2><a name="Paulo">DTrace Userland Project</a></h2>
      <p>Project Status: Completed</p>
      <p>FreeBSD Developer: Rui Paulo</p>

	<p>
	Rui Paulo has been awarded a grant to add DTrace userland support to FreeBSD.
	</p>

	<p>
	DTrace is a general purpose and lightweight tracing framework that
	allows administrators, developers and users to investigate causes of
	system failure or performance bottlenecks. The FreeBSD operating system
	has had support for kernel-only DTrace since FreeBSD 8.0, but DTrace
	userland support was missing. Having userland support in DTrace allows
	inspection of userland software itself and its correlation with the
	kernel, thus allowing a much better picture of what exactly is going on
	behind the scenes.
	</p>

	<p>
	This project will first concentrate on adding libproc support for symbol
	to address mapping, address to symbol mapping, breakpoint setup and the
	rtld interactions with DTrace. Next it will focus on DTrace process
	control, importing the pid provider and adapting it to FreeBSD and
	porting the userland statically defined probe provider (usdt). Finally
	it will bring in the plockstat provider.
	</p>

	<p>	
	"By having userland DTrace support, companies can make their
	products perform much better on FreeBSD due to the fact that they now
	have access to this amazing tool," said FreeBSD developer Rui Paulo. 
	He also said, "When we mix the userland support with the kernel side
	DTrace support, we can also make FreeBSD a better operating system because
	we can investigate performance bottlenecks much easier."
	</p>

	<p>
	The project was completed in September 2010.
	</p>


	<h2><a name="Bjoern">FreeBSD Jail Based Virtualization Project</a></h2>
      <p>Project Status: Completed</p>
      <p>FreeBSD Developer: Bjoern Zeeb</p>

	<p>
	Bjoern A. Zeeb has been awarded a grant to improve FreeBSD's jail based
	virtualization infrastructure and to continue to work on the virtual network
	stack. His employer, CK Software GmbH is matching the Foundation's funding with hours.
	</p>

	<p>
	FreeBSD has been well known for its jail based virtualization during the last decade.
	With the import of the virtual network stack, FreeBSD's operating system level
	virtualization has reached a new level.
	</p>

	<p>
	This project includes cleanup of two years of import work and development and, more 
	notably, brings the infrastructure for a network stack teardown. Cleanly shutting 
	down a network stack in FreeBSD will be the major challenge in the virtualization area 
	to get the new feature to production ready quality for the 9.x release lifecycle.
	<p>

	<p>
	Further, the project includes generalization of the virtual network stack framework, 
	factoring out common code. This will provide an infrastructure and will ease virtualization 
	of further subsystems like SYSV/Posix IPC with minimal overhead. All further virtualized 
	subsystems will immediately benefit from shared debugging facilities, an essential feature 
	for early adopters of the new technology.
	</p>

	<p>
	"Improved jail based virtualization support, that continues to be very lightweight and as 
	easily manageable as classic jails, will be a killer feature for the next few years," said 
	Bjoern A. Zeeb, FreeBSD developer. He also added, "It will allow people to partition their 
	FreeBSD server, run simulations without racks of hardware, or provide thousands of virtual 
	instances in hosting environments fairly easy and efficiently. While this follows the trend 
	of green computing, it also adds to FreeBSD's virtualization portfolio with Xen or other more 
	heavyweight hypervisor support, which can be mixed with jails as needed."
	</p>

	<p>
	While work in this area will have to continue, the funding for this project ended in July 2010.
	</p>

      <h2><a name="Pawel">High Available Storage Project</a></h2>
      <p>Project Status: Completed</p>
      <p>FreeBSD Developer: Pawel Jakub Dawidek</p>

      <p>Pawel Jakub Dawidek has been awarded a grant to implement storage
      replication software that will enable users to use the FreeBSD operating
      system for highly available configurations where data has to be shared
      across the cluster nodes. The project is partly being funded by <a href="http://www.omc.net">OMCnet
      Internet Service GmbH</a> and <a href="https://www.transip.nl">TransIP BV</a>.</p>

      <p>The software will allow for synchronous block-level replication of any
      storage media (GEOM providers, using FreeBSD nomenclature) over the
      TCP/IP network and for fast failure recovery. HAST will provide storage
      using GEOM infrastructure, which means it will be file system and
      application independent and could be combined with any existing GEOM
      class. In case of a master node failure, the cluster will be able to
      switch to the slave node, check and mount UFS file system or import ZFS
      pool and continue to work without missing a single bit of data.</p>

      <h2><a name="Rafal">Flattened Device Tree Project</a></h2>
      <p>Project Status: Completed</p>
      <p>FreeBSD Developer: Rafal Jaworowski</p>

      <p>Rafal Jaworowski and Semihalf has been awarded a grant to provide FreeBSD
      with support for the flattened device tree (FDT) technology. This project
      allows for describing hardware resources of a computer system and their
      dependencies in a platform-neutral and portable way.</p>

      <p>The main consumers of this functionality are embedded systems whose
      hardware resources assignment cannot be probed or self-discovered.
      The FDT idea is inherited from Open Firmware IEEE 1275 device-tree
      notion (part of the regular Open Firmware implementation), and among
      other deployments is used as a basis for Power.org's embedded platform
      reference specification (ePAPR).</p>

      <p>You can find out more about the project at <a href="http://wiki.freebsd.org/FlattenedDeviceTree">
      http://wiki.freebsd.org/FlattenedDeviceTree</a>.</p>

      <h2><a name="Paulo">Wireless Mesh Support</a></h2>
      <p>Project Status: Completed</p>
      <p>FreeBSD Developer: Rui Paulo</p>

      <p>Rui Paulo will be implementing the forthcoming IEEE 802.11s wireless mesh standard for FreeBSD.
       Wireless mesh networks are expected to become widespread as routers and network appliances deploy 
       them, allowing wireless networks to be built and extended dynamically. Support for the standard 
       will allow FreeBSD consumers to take advantage of this new technology.</p>

      <h2><a name="Swinburne">Improvements to the FreeBSD TCP Stack.</a></h2>
      <p>Project Status: Completed</p>
      <p>FreeBSD Developer: Lawrence Stewart and <a href="http://caia.swin.edu.au">Swinburne University</a>
       of Technology's Centre for Advanced Internet Architectures (CAIA)</p>

      <p>This three-part project will include implementing
      Appropriate Byte Counting (ABC) RFC3465 support, adapting and merging
      CAIA's Statistical Information for TCP Research (SIFTR) TCP analysis
      tool into FreeBSD, and making improvements to the TCP reassembly queue.</p>

      <p>The project completed July 2009.</p>


      <h2><a name="Edward">Make removing disk devices with mounted filesystems on them safe.</a></h2>
      <p>Project Status: Completed</p>
      <p>FreeBSD Developer: Edward Tomasz Napierala</p>
      <p>The project is to make FreeBSD tolerate the removal of active disk
       devices, such as when a USB flash device with a mounted filesystems is
       physically detached by a user.  Currently the system may panic in this
       situation. The work involves adding proper reference counting to
       strategic portions of the kernel and modifying filesystems to properly
       handle "device lost" errors.</p>

      <p>Status of the changes is: -CURRENT should no longer panic when you remove a USB drive
       without unmounting it first. The changes will be merged into 7.x soon.</p>
    
      <h2><a name="Bjoern">Network Stack Virtualization Project</a></h2>

      <p>Project Status: Completed</p>
      <p>FreeBSD Developer: Bjoern Zeeb</p>

      <p>The virtualized network stack will significantly enhance FreeBSD's jail functionality,
       allowing jails to have their own complete and locally administered network stacks, 
       including firewalls, routing, and IPsec configurations. The Foundation will be sponsoring 
       Bjoern Zeeb, a FreeBSD network developer, to enhance the existing prototype, now being 
       merged into FreeBSD 8.x, as well as provide code review.</p>

      <h2><a name="koshy">Improving the Hardware Performance Counter
       Support</a></h2>
       <p>Project Status: Completed August 6, 2007</p>
       <p>FreeBSD Developer: Joseph Koshy</p>
       <p>The FreeBSD Foundation, with a generous grant from Google, teamed
        up to sponsor Joseph Koshy in improving the hardware performance counter
        support in FreeBSD.  The goal of the project was the addition of callgraph
        support in the hwpmc driver.  With callgraph support, developers can more
        clearly visualize performance issues through the exact code paths, rather
        than a specific function which may only exhibit issues through one path,
        but not others.  In addition to the improvements to this software, Google
        provided funding for 2 modern CPU machines for development and testing.
        These new machines were placed in the network performance cluster hosted
        by Sentex Corp in Ontario, Canada.</p>
       <p>Following is a more detailed list of what was added:</p>
       <ul>
        <li>The hwpmc driver now supports callchain capture, for both the kernel and for user processes.</li>

        <li>The machine-dependent and machine-independent
         parts of the kernel for the i386 and amd64 architectures (the ones
         that hwpmc is available on) have been so enhanced to support extra functionality needed by hwpmc(4)
         for callgraph support.</li>

        <li>The libpmc(3) library has been enhanced to process
         the new information collected by the kernel module.</li>

        <li>The pmcstat(8) tool produces two kinds of reports
         using captured callchain data, (a) traditional gprof(1) callgraphs and
         (b) a callchain summary, for two different 'views' into the collected data.</li>

        <li>Manual pages for the driver hwpmc(4), command-line tool
         pmcstat(8), and interface library pmc(3) now reflect the new features available.</li>
       </ul>

       <p><b>How to access the code</b></p>
       <p>The callchain capture work is in CVS now.</p>

      <h2><a name="Network">Network Stack Virtualization Project</a></h2>
       <p>Project Status: Completed</p>
       <p>FreeBSD Developer: Marko Zec</p>

       <p>The network stack virtualization project aims at extending the 
        FreeBSD kernel to maintain multiple independent instances of networking 
        state.  This will allow for complete networking independence between 
        jails on a system, including giving each jail its own firewall, virtual 
        network interfaces, rate limiting, routing tables, and IPSEC 
        configuration.</p>

       <p>The prototype, which is kept in sync with 
        FreeBSD -CURRENT, is now sufficiently stable for testing.  It 
        virtualizes the basic INET and INET6 kernel structures and subsystems, 
        including IPFW and PF firewalls, and more.  The next step is to 
        have the IPSEC code fully virtualized, and refine and document the 
        management APIs.  The short-term goal is to deliver production-grade 
        kernel support for virtualized networking for FreeBSD 7.0-RELEASE (as a 
        snap-in kernel replacement), while continuing to keep the code in sync 
        with -CURRENT for possible merging at a later date.</p>


</div> <!-- /content -->
</div> <!-- /contentwrap -->
</div> <!-- /contentcontainer -->

  <div id="footer">Copyright &copy; 2001-2013 The FreeBSD Foundation.</div>


</div> <!-- /container -->

</body>
</html>
