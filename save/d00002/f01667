<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
 "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>
 <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
 <meta http-equiv="Content-Style-Type" content="text/css" />
 <meta name="MSSmartTagsPreventParsing" content="TRUE" />
 <link rel="stylesheet" type="text/css" href="vstyle.css" />
 <link rel="apple-touch-icon" href="pics/blumenkohl.png" />
 <!--[if IE]>
 <link rel="shortcut icon" type="image/x-icon" href="favicon.ico" />
 <![endif]-->
 <link rel="icon" type="image/png" href="favicon.png" />
 <link rel="canonical" href="https://www.mirbsd.org/wlog-10_all.htm" />
 <meta name="author" content="Thorsten Glaser" />
 <meta name="copyright" content="All rights reserved. Redistribution except for scientific and educational uses strictly prohibited. Unmodified redistribution with no endorsement permitted." />
 <meta name="owner" content="The MirOS Project and The MirPorts Framework" />
 <meta name="licence" content="see the source files in CVSWEB for details" />
 <title>MirOS: MirOS ξ – Page 2</title>
 <meta name="robots" content="index, follow" />
 <link rel="alternate" type="application/rss+xml" title="RSS" href="wlog-10.rss" />
 <!--
  This is copyrighted material. For the full licence text, see the file
  LICENCE in the current directory. In no event may text from this page
  be simply copied into another work covered by an unfree (or otherwise
  mismatching) licence, such as the GNU Free Documentation License.
 -->
</head><body>
<h1><img src="hashed/CD865EB6.png" alt="Developers’ Weblog" /></h1>
<div class="trailing">
<div class="index">
 <ul class="lv1">
<li class="dummy"><a href="main.htm">Main</a><ul class="lv2">
<li class="markindex"><a href="wlog-10.htm">Weblog</a> for #10</li>
<li class="dummy dummy"><a href="tags.htm">Tag Cloud</a></li>
<li class="dummy dummy"><a href="news.htm">Old News</a> &amp;
 <a href="oldnews.htm#owlog">WLog</a></li>
</ul></li>
<li class="dummy"><a href="about.htm">About</a></li>
<!-- these are not in a usable state
<li class="dummy"><a href="docs.htm">Documentation</a></li>
<li class="dummy dummy"><a href="faq.htm">FAQ</a></li>
-->
<li class="spacer dummy"><a href="getting.htm">Download</a></li>
<li class="dummy"><a href="rss.htm">RSS &amp; Mailing Lists</a></li>
<li class="dummy"><a href="irc.htm">IRC</a></li>
<li class="dummy"><a href="wtf.htm" title="WTF‽">Acronyms</a></li>
<li class="dummy"><a href="projects.htm">Project Ideas</a></li>
<li class="dummy"><a href="danke.htm">Donate</a></li>
<li class="dummy"><a href="man.htm">Manpages</a><ul class="lv2">
<li><a href="htman/i386/">i386</a></li>
<li><a href="htman/sparc/">sparc</a></li>
</ul></li>
<li class="dummy"><a href="ports.htm">MirPorts</a> Framework</li>
<li class="dummy"><a href="pkgsrc.htm">pkgsrc®</a> integration</li>
<li class="dummy">Subprojects<ul class="lv2">
<li class="dummy"><a href="jupp.htm">jupp</a> Editor</li>
<li class="dummy"><a href="kwalletcli.htm">KWalletCLI</a></li>
<!-- li class="dummy"><a href="makefs.htm">makefs</a></li -->
<li class="dummy"><a href="mksh.htm">mksh</a> Shell</li>
</ul></li>
 </ul>
</div>
<div class="content">
<p><a href="wlog-10_all.htm">All</a> <a href="wlog-10.htm">1</a> <a href="wlog-10_2.htm">2</a> <a href="wlog-10_3.htm">3</a> <a href="wlog-10_4.htm">4</a> <a href="wlog-10_5.htm">5</a> <a href="wlog-10_6.htm">6</a> <a href="wlog-10_7.htm">7</a> <a href="wlog-10_8.htm">8</a> <a href="wlog-10_9.htm">9</a> <a href="wlog-10_10.htm">10</a> <a href="wlog-10_11.htm">11</a> <a href="wlog-10_12.htm">12</a> <a href="wlog-10_13.htm">13</a> <a href="wlog-10_14.htm">14</a> <a href="wlog-10_15.htm">15</a> <a href="wlog-10_16.htm">16</a> <a href="wlog-10_17.htm">17</a> <a href="wlog-10_18.htm">18</a> <a href="wlog-10_19.htm">19</a> <a href="wlog-10_20.htm">20</a> <a href="wlog-10_21.htm">21</a> <a href="wlog-10_22.htm">22</a> <a href="wlog-10_23.htm">23</a> <a href="wlog-10_24.htm">24</a> <a href="wlog-10_25.htm">25</a> <a href="wlog-10_26.htm">26</a> <a href="wlog-10_27.htm">27</a> <a href="wlog-10_28.htm">28</a> <a href="wlog-10_29.htm">29</a></p>
<div class="wlentry">
<div class="wltitle">
<h2 class="wlentry" id="e20130220-tg_wlog-10"><a href="permalinks/wlog-10_e20130220-tg.htm#e20130220-tg_wlog-10">GNU autotools generated files</a></h2>
<div class="wlsubtitle">20.02.2013 by <a href="mailto:tg@mirbsd.org">tg@</a></div>
<div class="wltagtitle">Tags: <a href="tag_debian_all.htm#e20130220-tg_wlog-10">debian</a> rant</div>
</div>
<p class="boxhead">On Planet Debian, Vincent Bernat <a
 href="http://vincent.bernat.im/en/blog/2013-lldpd-0.7.1.html">wrote</a>:</p>
<div class="boxtext">
 The drawback of this approach is that if you rebuild configure from
 the released tarball, you don’t have the git tree and the version will
 be a date. Just don’t do that.
</div><p class="boxfoot">Excuse me‽</p>
<p>This is totally inacceptable. Regenerating files like aclocal.m4 and
 Makefile.in (for automake), configure (for autoconf), and the likes is
 one of the absolute <strong>duties</strong> of a software package.
 Things <strong>will</strong> break sooner or later if people do not do
 that. Additionally, generated files <strong>must</strong> be remakable
 from the distfile, so <strong>do not break this!</strong></p>
<p>May I suggest, constructively, an alternative? (People – rightfully,
 I must admit – complain I’m “just” ranting too much.)<br />When making
 a release from git, write the “git describe” output into a file. Then,
 use that file instead of trying to run the git executable if .git/. is
 not a directory (“<tt>test -d .git/.</tt>”). Do not call git, because,
 in packages, it’s either not installed or/and also undesired.</p>
<p>Couldn’t comment on your blog, but felt strongly enough about this I
 took the effort of writing a full post of my own.</p>
<p>(But thanks for the book recommendation.)</p>
</div>
<div class="wlentry">
<div class="wltitle">
<h2 class="wlentry" id="e20130113-tg_wlog-10"><a href="permalinks/wlog-10_e20130113-tg.htm#e20130113-tg_wlog-10">PSA: Unicode codepoints, referring to</a></h2>
<div class="wlsubtitle">13.01.2013 by <a href="mailto:tg@mirbsd.org">tg@</a></div>
<div class="wltagtitle">Tags: <a href="tag_debian_all.htm#e20130113-tg_wlog-10">debian</a> rant</div>
</div>
<p><a href="wtf.cgi?PSA">PSA</a>: Referring to Unicode
 codepoints.</p>
<p>If your Unicode codepoint is, numerically, between 0 and 65533,
 inclusive, convert it to hexadecimal and zero-pad it to four nibbles.
 For example, the Euro sign € is Unicode codepoint #8364 which is 20AC
 hex; the Eszett ß is 223 which is DF hex, padded 00DF.<br />
 Then write an uppercase ‘U’, a plus sign ‘+’, and the four nibbles:
 U+20AC U+00DF<br />In <a href="mksh.htm">mksh</a>, <a
 href="cvs.cgi/contrib/hosted/tg/code/MirJSON/json.txt?rev=HEAD">JSON</a>,
 etc. it’s a backslash ‘\’, a lower-case ‘u’ and four nibbles.</p>
<p>Otherwise, your Unicode codepoint will be, numerically, between
 65536 and 1114111, inclusive, that is hex 10000 to 10FFFF. (There’s
 nothing on 65534 and 65535, nor above these figures.) In this case,
 convert it to hex, zero-pad it <strong>to eight nibbles</strong> and
 write it as an uppercase ‘U’, <strong>a hyphen-minus ‘-’</strong> and
 the <strong>eight</strong> nibbles. In C-like escapes for environments
 supporting the Unicode SMP, that’s a backslash ‘\’, an upper-case ‘U’
 and eight nibbles. <em>Do not, in either case, use less (or more) hex
 digits than specified here.</em> For example, there’s a famous Unicode
 codepoint U-0001F4A9 “PILE OF POO”. <strong>That’s not the same as
 U+1F4A9</strong>. The latter reads as U+1F4A “GREEK CAPITAL LETTER
 OMICRON WITH PSILI AND VARIA” and a digit 9 (Ὂ9). Be educated.</p>
<!-- RSS stop --><p>Since this wlog runs on MirBSD, which limits itself
 to the Unicode BMP voluntarily, and as nōn-BMP is not widespread anyway,
 I cannot reproduce the “PILE OF POO” here, but you can <a
 href="https://duckduckgo.com/?kp=-1&amp;kl=wt-wt&amp;kb=t&amp;kh=1&amp;kj=g2&amp;km=l&amp;ka=monospace&amp;ku=1&amp;ko=s&amp;k1=-1&amp;kv=1&amp;t=debian&amp;q=unicode+pile+of+poo">just
 duckduckgo it</a>.</p>
</div>
<div class="wlentry">
<div class="wltitle">
<h2 class="wlentry" id="e20130104-tg_wlog-10"><a href="permalinks/wlog-10_e20130104-tg.htm#e20130104-tg_wlog-10">on the linguistic gender of hosts, with an xz reminder</a></h2>
<div class="wlsubtitle">04.01.2013 by <a href="mailto:tg@mirbsd.org">tg@</a></div>
<div class="wltagtitle">Tags: <a href="tag_debian_all.htm#e20130104-tg_wlog-10">debian</a></div>
</div>
<p>Let’s start a convention: bare-metal machines have the linguistic male
 gender (<span xml:lang="de-DE-1901">„der Computer“</span>, he needs to be
 rebooted), whereas VMs have the linguistic female gender (<span
 xml:lang="de-DE-1901">„die virtuelle Maschine“</span>, she runs better
 since the last upgrade of Linux-KVM), and neutral linguistic gender is
 used when you cannot or do not want or need to make such distinction.<br />
 This is, of course, entirely unrelated to human gender, but not unrelated
 to <tt>#debian-68k</tt> (on OFTC) discussions ;-)</p>
<p>ObRant: <strong>DO NOT USE xz COMPRESSION LEVELS ABOVE 6!</strong> (For
 <tt>-7</tt> we can make exceptions, for example in Debian *<tt>-dbg</tt>
 or *<tt>-source</tt> packages.) You <em>may</em> use <tt>-e</tt> if you
 absolutely need the better compression, but please think of the poor sods
 who have to create the archives. You <em>must not</em> use the highest
 compression levels <tt>-8</tt> or <tt>-9</tt> since they have absolutely
 insane memory requirements on compression and will still hinder machines
 with less RAM on decompression. (Using <tt>-e</tt> only affects CPU usage
 at compression time; decompression is exactly as fast and memory-consuming
 as without.) Furthermore, <strong>DO NOT CHOOSE A COMPRESSION LEVEL WITH
 A DICTIONARY SIZE MUCH LARGER THAN THE DATA TO COMPRESS</strong>, as that
 makes absolutely no sense and will rather worsen than improve compression.
 As a reminder, xz uses the following dictionary sizes:</p><ul>
  <li>256 KiB at <tt>-0</tt> (compresses better than <a href="htman/i386/man1/gzip.htm" class="manlink">gzip(1)</a> and faster
   than either <a href="htman/i386/man1/gzip.htm" class="manlink">gzip(1)</a> or bzip2)</li>
  <li>1 MiB at <tt>-1</tt></li>
  <li>2 MiB at <tt>-2</tt> (compresses better than <a href="htman/i386/man1/gzip.htm" class="manlink">gzip(1)</a> and bzip2
   without losing much speed)</li>
  <li>4 MiB at <tt>-3</tt> and <tt>-4</tt> (the difference is in the
   match finder between these two levels)</li>
  <li>8 MiB at <tt>-5</tt> and <tt>-6</tt></li>
  <li>16 MiB at <tt>-7</tt> (186 MiB RAM used to compress a file)</li>
  <li>32 MiB at <tt>-8</tt> (370 MiB RAM used to compress a file)</li>
  <li>64 MiB at <tt>-9</tt> (674 MiB RAM used to compress a file)</li>
</ul>
<p>Decompression uses less than 1 MiB more than the dictionary size,
 but the dictionary must always be allocated wholly. (You’re fine to
 use custom presets, but mind the RAM usage!) As a general rule, if
 you have something of up to 20 MiB to compress, <tt>-4</tt> is fine,
 and <tt>-5</tt> will only be better if you have similar data spread
 across the whole of the file instead of close to each other. When I
 make <a href="mksh.htm">mksh</a> distfiles, I instead put
 files close to each other that have related content, which improves
 compression much more nicely without penalising low-memory systems;
 for example, you could put documentation, Makefiles, scripts, <a href="htman/i386/man1/m4.htm" class="manlink">m4(1)</a>
 files, and C source code into groups before archiving, instead of
 doing it alphabetically.</p>
<p>Another note on bzip2: its decompression <strong>is slow</strong>.
 I see no reason to use it any more, <em>at all</em>. Use <a href="htman/i386/man1/gzip.htm" class="manlink">gzip(1)</a> if
 you care for compatibility or have an issue with xz not having a free
 copyright licence, and xz otherwise.</p>
</div>
<div class="wlentry">
<div class="wltitle">
<h2 class="wlentry" id="e20121231-tg_wlog-10"><a href="permalinks/wlog-10_e20121231-tg.htm#e20121231-tg_wlog-10">Not just Amigas, editors and errnos</a></h2>
<div class="wlsubtitle">31.12.2012 by <a href="mailto:tg@mirbsd.org">tg@</a></div>
<div class="wltagtitle">Tags: <a href="tag_debian_all.htm#e20121231-tg_wlog-10">debian</a> <a href="tag_mksh_all.htm#e20121231-tg_wlog-10">mksh</a></div>
</div>
<p><a href="mksh.htm">mksh</a> made <a
 href="http://phoronix.com/forums/showthread.php?76247-Debian-Brought-Back-To-Life-On-M68K-Based-Amigas">quite</a> <a
 href="http://linux.slashdot.org/story/12/12/26/163222/debian-m68k-port-resurrected">some</a> <a
 href="http://www.solidot.org/story?sid=32869">waves</a> (machine <a
 href="http://sprunge.us/UPGA">translation</a> of the third article) recently.
 Let’s state it’s not just Amigas – ara5 is a buildd running the Atari kernel,
 an emulated though. On the other hand, the bare-metal Ataris used to be the
 fastest buildds, so I expect we get them back online soonish. I’m currently
 fighting with some buildd software bugfixes, but once they’re in, we will
 make more of them. Oh, and porterboxen! Does anyone want to host a VM with a
 porterbox? Requirements: wheezy host system (can be emulated), 1 GiB RAM, one
 CPU core with about 6500 BogoMIPS or more (so the emulated system has decent
 speed; an AMD Phenom II X4 3.2 GHz does just fine). Oh, and mksh is <a
 href="mksh_bld.htm">ported</a> to more and more platforms, like
 386BSD 0.0 with GCC 1.39, and QNX 4 with Watcom… and more bugfixes are also
 being worked on. And let’s not forget features!</p>
<p><a href="jupp.htm">jupp</a> got refreshed: it’s got a bracketed
 paste mode, which is even auto-enabled on <tt>xterm-xfree86</tt> (though the
 <a href="htman/i386/man1/xterm.htm" class="manlink">xterm(1)</a> in MirBSD’s a tad too old to know it; will update that later, just
 imported <a href="htman/i386/man8/sendmail.htm" class="manlink">sendmail(8)</a> 8.14.6 and <a href="htman/i386/man1/lynx.htm" class="manlink">lynx(1)</a> 2.8.8dev.15 into base, more to come)
 and will be enhanced later (should disable auto-indent, wordwrap, status line
 updates, and possibly more), lots of new functions and bindings, now uses
 <a href="htman/i386/man3/mkstemp.htm" class="manlink">mkstemp(3)</a> to create backup files race-free, and more (read the NEWS file).</p>
<p>In MirBSD, Benny and I just added a number of <tt>errno</tt>s, mostly for
 SUSv4 compliance and being able to compile more software from pkgsrc® without
 needing to patch. This is being tested right now (although I should probably
 go out and watch fireworks in less than a half-hour), together with the new
 imports and the bunch of small fixes we accumulate (even though <em>most</em>
 development in MirBSD is currently in <a href="htman/i386/man1/mksh.htm" class="manlink">mksh(1)</a> and similar doesn’t mean that
 <em>all</em> is, or worse, we were dead, which we aren’t). I’ll publish a
 new snapshot some time in January. The Grml 2012.12 also contains a pretty
 up-to-date MirBSD, with a <a href="htman/i386/man8/boot.htm" class="manlink">boot(8/i386)</a>loader that now ignores GUID partition
 table entries when deciding what to use for the ‘a’ slice.</p>
<p>If you haven’t already done so, read <a href="http://mako.cc/">Benjamin
 Mako Hill</a>’s writings!</p>
</div>
<div class="wlentry">
<div class="wltitle">
<h2 class="wlentry" id="e20121215-tg_wlog-10"><a href="permalinks/wlog-10_e20121215-tg.htm#e20121215-tg_wlog-10">Der heilige… Frieden?</a></h2>
<div class="wlsubtitle">15.12.2012 by <a href="mailto:tg@mirbsd.org">tg@</a></div>
<div class="wltagtitle">Tags: <a href="tag_debian_all.htm#e20121215-tg_wlog-10">debian</a> politics</div>
</div>
<p style="font-size:small;">(Apologies for putting this on Planet Debian,
 but it says the one or other non-English post is okay as long as it’s an
 exception. I feel I need to reach more people with this, but don’t feel
 like translating this into English right now.)<br />Update: Tanguy asked
 for a short English summary: it’s me ranting against the rioting against
 muslims and the call for more CCTV surveillance after a <em>possible</em>
 bomb was found at the train station.</p>
<p>In Bonn herrscht immer noch „Bombenstimmung“, wenn man z.B. auf die
 Webseite der Lokalzeitung schaut – von dem Amoklauf in Connecticut, über
 den sich im IRC gewunder wird, ist immer noch nichts zu sehen, dafür wird
 fleißig wider „Islamisten“ gehetzt.</p>
<p>Ich finde das besorgniserregend, muß doch jetzt jeder Angehörige des
 Islams fürchten, verfolgt oder benachteiligt zu werden. Das reizt doch
 erst recht zum Gegenschlag, bei dem dann auch Menschen, die absolut
 <strong>nicht</strong> mit der hier vorherrschenden Meinung und Politik
 übereinstimmen, getroffen werden können.</p>
<p>Ich persönlich habe kein Problem mit Menschen anderen Glaubens oder
 anderer Weltanschauung, solange wir friedlich miteinander leben können.
 Ich teile eure Unzufriedenheit mit dem herrschenden Staat, der immer
 weitergehenden Überwachung, Unterdrückung von Leuten, die nicht dem
 vorherrschenden Menschenbild entsprechen (egal an welchen Kategoriën),
 und bitte die, die dies lesen, nochmal nachzudenken, bevor sie etwas
 tun, was hinterher Unschuldige trifft oder gar in „friendly fire“
 ausartet.</p>
<p>Hat eigentlich wer die in Bad Godesberg ausgegebenen Koran-Bücher
 sich mal angeschaut? Als ich davon las, war ich ja zugegebenermaßen
 neugierig, weil ich vom Koran leider eher wenig kenne, weiß aber nicht,
 wie neutral oder eben nicht die Übersetzung gehalten ist. Anhand dessen,
 <em>was</em> ich bereits mitbekam, sollte das eher friedlicher sein als
 was durch spätere Theologen festgelegt wurde – wie ja auch zum Beispiel
 im Christentum, aber über die Horrorepisoden der christlichen Kirche will
 ich jetzt auch nicht mich auslassen, in der Hoffnung, daß auch diese sich
 mit den Jahren gebessert hat. (Ist nur halt das Problem mit den Leuten,
 die die „alten Hetzparolen“ jetzt noch verbreiten. Ist wie im Netz mit
 den Groupies von Theo de Raadt, die noch asiger zu Leuten sind als er
 selber.) (Außerdem muß man ja befürchten, durch Besitz eines Korans schon
 vorverurteilt zu werden heutzutage *seufz*… ich finde das nicht gut!)</p>
<p>Update (ich vergaß): auch der Ruf nach mehr Videoüberwachung ist nur
 Panikmache. Das geht nur zu Lasten des Normalbürgers. Vielleicht lassen
 sich noch Kleinstdelikte wie Taschendiebstahl damit abschrecken, aber
 gerade diese Bomben und dergleichen sind doch oft von Leuten, die vor
 Konsequenzen keine Angst haben, organisiert. Die werden dann maximal
 Märtyrer. Ich wiederhole nochmal für die Politiker und die ganz langsamen
 unter den Lesern: Überwachung verhindert <em>keine</em> Straftat.</p>
<p><strong>Update 11.01.2013</strong>: Mittlerweile hat auch <a
 href="http://blog.fefe.de/?ts=ae2a54c2">Fefe</a> was dazu.</p>
</div>
<div class="wlentry">
<div class="wltitle">
<h2 class="wlentry" id="e20121210-bsiegert_wlog-10"><a href="permalinks/wlog-10_e20121210-bsiegert.htm#e20121210-bsiegert_wlog-10">Call for Participation: BSD developers’ room at FOSDEM 2013</a></h2>
<div class="wlsubtitle">10.12.2012 by <a href="mailto:bsiegert@mirbsd.org">bsiegert@</a></div>
<div class="wltagtitle">Tags: <a href="news_all.htm#e20121210-bsiegert_wlog-10">news</a></div>
</div>
<p>There is one week left to submit your talk proposals for the BSD
 devroom at FOSDEM 2013. We still have quite a few slots open, so do not
 be shy! See the original announcement below:</p>

<blockquote>
 <p>FOSDEM 2013 will take place on February 2-3, 2013, in Brussels,
  Belgium. Just like in the last years, there will be both a BSD booth
  and a developer's room (on Sunday).</p>

 <p>The topics of the devroom include all BSD operating systems. Every
  talk is welcome, from internal hacker discussion to real-world
  examples and presentations about new and shiny features. The talks
  will be 45 minutes including discussion. Feel free to ask if you want
  to have a longer or shorter slot.</p>

 <p>If you want to do a talk, please submit your proposal to</p>

 <p style="text-align: center">bsiegert at google.com</p>

 <p>and include the following information:</p>

 <ul>
  <li>Your name</li>
  <li>The title of your talk (please be descriptive, as titles will be
     listed with ~400 from other projects)</li>
  <li>A short abstract of one to two paragraphs</li>
  <li>A short biography introducing yourself</li>
  <li>Links to related websites/blogs etc.</li>
 </ul>
</blockquote>

<p>The deadline for submissions is December 17, 2012. The talk committee,
 consisting of Daniel Seuffert, Marius Nünnerich and Benny Siegert,
 will consider the proposals. If yours has been accepted, you will be
 informed by e-mail within one week of the submission deadline.</p>
</div>
<div class="wlentry">
<div class="wltitle">
<h2 class="wlentry" id="e20121207-tg_wlog-10"><a href="permalinks/wlog-10_e20121207-tg.htm#e20121207-tg_wlog-10">Collision resolution in open addressing hashtables</a></h2>
<div class="wlsubtitle">07.12.2012 by <a href="mailto:tg@mirbsd.org">tg@</a></div>
<div class="wltagtitle">Tags: <a href="tag_debian_all.htm#e20121207-tg_wlog-10">debian</a></div>
</div>
<p>Before we begin, everyone should read up on hashtables and what open
 addressing / closed hashing is. The context is lines 111‥190 of <a
 href="http://hg.python.org/cpython/file/026b9f5dd97f/Objects/dictobject.c">Python’s
 Objects/dictobject.c as of today</a> (so we get the line numbers straight).</p>
<p>(I’ve reworded this wlog entry a bit; I originally wrote it too late at
 night for it to read coherent.) Basically, I’ve got an application where
 I’d like to use a hashtable for a number of things – not as generic as
 Python, and with focus on small footprint. I’d like to offer associative
 arrays in a scripting language, where the keys are always arbitrary byte
 strings excluding NUL. Also, I’d like to use the hashtable as backend for
 indexed arrays, where the keys are <tt>uint32_t</tt> and the usual use
 case is sequential. Finally, I’m using it for several internal tables,
 such as a list of keywords, one of builtins, one of special variables,
 etc. which is a reason for me to not use a self-balancing binary tree
 as data structure (reading further below might suggest that, but getting
 a sorted list of hashtable keys is not the focus, though not unimportant).
 <br />My questions on this are:</p>
<p class="boxhead">① Why is the shift on perturb done after its first use?
 In my experiments (using 32-bit width everywhere), for the pathological
 case of an 8-element (i = 3) table with three entries 0, 0x40000000 and
 0x800000000, the “second round” yields 1 for all three, so it cannot have
 to do with the upper bits. My lookup looks like:</p><div class="boxtext">
 <pre>
<span style="display:none;">	</span>mask = 2ⁱ - 1;
<span style="display:none;">	</span>j = perturb = hash(key);
<span style="display:none;">	</span>goto find_first_slot;

<span style="display:none;">	</span> find_next_slot:
<span style="display:none;">	</span>j = (j &lt;&lt; 2) + j + perturb + 1;
<span style="display:none;">	</span>perturb &gt;&gt;= PERTURB_SHIFT;
<span style="display:none;">	</span>/* FALLTHROUGH */

<span style="display:none;">	</span> find_first_slot:
<span style="display:none;">	</span>entry = table[j &amp; mask];
<span style="display:none;">	</span>if (!match(entry)) goto find_next_empty_slot;
 </pre>
</div><p class="boxfoot">This means that my first check is always the bare
 hash (so “only do it if needed” is no reason) and, since I’m using gotos,
 I could just move the <tt>perturb &gt;&gt;= PERTURB_SHIFT;</tt> line before
 the line recalculating the next <tt>j</tt> to use. This seems to make more
 sense, even in the face of Python. (I actually looked at the Python file’s
 comments again today because I thought to use a different resolution, but
 they have a good rationale for using the multiplication by 5.)</p>
<p>② Why can’t we just use <tt>i</tt> as the <tt>PERTURB_SHIFT</tt>? Sure,
 this changes a shift-right by a constant, which can possibly be encoded
 as immediate value in assembly (unless you’re on a pre-80186, which can
 only do <tt>SHR AX,1</tt> and <tt>SHR AX,CL</tt> but not <tt>SHR AX,4</tt>,
 but that’s outside of <a href="mksh.htm">mksh</a>’s scope) into
 a right-shift by a variable, but <tt>i</tt> is already known, and I think
 the behaviour is better (it wouldn’t eat any bits; assume the same 8-entry
 hashtable and pathologic keys 0, 8 and 16). Again: who do I think I am to
 go against the wisdom of the Python people, who seem to have shed more
 thought on this than everyone else I saw, asked, read about (including <a
 href="http://pics.nase-bohren.de/jimmywales-begging.jpg">Spammipedia</a>).
 That’s why I’m asking here. <span style="font-size:small;">On that reference:
 I don’t support spammers or people nagging for donations or premium accounts,
 like Xing and Groundspeak/Geocaching.COM, at all. In fact, I urge others to
 do the same, so it really hurts them; it may be their business model, but not
 if they spam me. Besides, OpenCaching.DE exists.</span></p>
<p>Another thing is: to avoid CVE-2011-4815, I’m randomising the hash used,
 with one “seed” value per hashtable, changed before a resize operation.
 I originally thought to seed it with nonzero, but then I have to rehash
 on hashtable resize, so I’ll be XORing the final hash value instead (thanks
 ciruZ for the idea). I’m thinking of omitting that for indexed arrays, as
 an attacker almost certainly cannot determine the keys there. (To directly
 use the indexed array keys, which are already <tt>uint32_t</tt>, as hashes
 makes using <tt>i</tt> from ② even more important.) The hash I’m using is
 a modified Jenkins one-at-a-time called NZAAT: it’s my new generic standard
 nōn-cryptographic hash, and the changes are thus: while adding a byte,
 another increment of the hash is done (so NUL counts), and the finaliser
 got prefixed with the shift-left-add+shift-right-xor sequence of the
 adder (but not adding any value or the +1), to get best avalanche for
 all bytes. I actually compiled several versions of <tt>Hash.cs</tt> on
 a Windows® VM at work to analyse the original one-at-a-time and all of my
 modifications; these turned out to be the simplest ones (I originally had
 added 0x100 instead of 1, but the effect was the same, and +1 is usually
 cheaper on most CPUs).</p>
<p>Also, to avoid people being able to get to the seed, a user will always
 get only a sorted list of hashtable keys (numeric for indexed arrays,
 ASCIIbetically otherwise; see also my thoughts on JSON from the previous
 wlog entry). What algorithm do I use? For strings, comparisons are much
 more expensive, so I’d like to keep them low. Memory use is also a factor;
 allocating one large(r) block is better than many small ones due to the
 pool allocator overhead and due to portability to ancient Unicēs (which
 is another reason for me to use a hashtable which is a small struct plus
 an array of pointers, and then pass the list of keys as array of string
 pointers, instead of a tree). For both reasons, I’m thinking a relatively
 simple MergeSort: I need to allocate the result array anyway, so I can
 just get two and free the one that isn’t the end result, and it’s AFAICT
 the cheapest on comparisons other than Tree Sort (which nobody really seems
 to use, and which would effect to using a balanced binary tree again).
 Since keys are unique, stability and duplicate handling is never an issue.
 I’d like to use only one algorithm and one data structure, not a combination,
 as compactness <em>is</em> a design goal.</p>
<p>Please drop your thoughts on <a href="irc.htm">Freenode</a>,
 e.g. by <tt>/msg MemoServ send mirabilos <i>your text here</i></tt> or per
 eMail to the domains debian, freewrt or mirbsd, which are organisations, with
 the localpart <tt>tg</tt>. Or just contact me as usual, if you’re already
 acquainted. Or lookup 0xE99007E0. Thanks in advance! (Especially, Python
 Developers’ thoughts are welcome.)</p>
</div>
<div class="wlentry">
<div class="wltitle">
<h2 class="wlentry" id="e20121201-tg_wlog-10"><a href="permalinks/wlog-10_e20121201-tg.htm#e20121201-tg_wlog-10">Proposed extensions to the JSON specification</a></h2>
<div class="wlsubtitle">01.12.2012 by <a href="mailto:tg@mirbsd.org">tg@</a></div>
<div class="wltagtitle">Tags: <a href="tag_debian_all.htm#e20121201-tg_wlog-10">debian</a></div>
</div>
<p>The following proposal extends the JSON specification, with the idea
 of using JSON as an information interchange format, rather than just a
 way of writing certain ECMAscript values. They do not add anything but
 only restrict valid JSON content and encoders with some rationale.</p>
<p>First of, I’d like to remind everyone, including JSON’s author, that
 JSON <em>is</em> case-sensitive, <em>except</em> in the four hexdigits
 after a backslash-u sequence in a String.</p>
<p>Second, I’d like to remind everyone that JSON is not binary-safe. No
 way around that, it implements Unicode (actually, 16-bit UCS-2, and it
 doesn’t guarantee that UTF-16 surrogates are correctly paired) text. I
 also consider only UTF-{8,{16,32}{B,L}E} valid encodings for JSON. (No
 PDP endian, either. Sorry, guys.)</p>
<p>For my first proposal, I’d like to point out CVE-2011-4815 which was
 about overflowing hashtables. The obvious fix is to randomise the hash
 per hashtable; to ensure this doesn’t leak, we sort ASCIIbetically the
 keys of an Object in the encoder. (Using Unicode is good here – we can
 just sort the keys as UTF-8 strings by their <tt>uint8_t</tt> value or
 as Unicode (UCS-2 or even UCS-4 or UTF-16) strings by the codepoints.)
 JSON was never preserving the order of elements in an Object anyway so
 we make it standardised (we still accept any order, and, when parsing,
 in collision cases, the later value wins). This also helps diffs.</p>
<p>For my second proposal, I’d like to forbid \u0000, \uFFFE, \uFFFF in
 strings. The first because many implementations use C strings, and for
 an information interchange format this is better; it also has security
 implications to allow NUL in a string. The other two, but not unpaired
 UTF-16 surrogates (as ECMAscript uses UCS-2 and got UTF-16 only later)
 because they’re not valid Unicode; JSON was not binary-safe already so
 why bother. Among other benefits, this also helps implementations.</p>
<p>For my third proposal, I’d like to agree that implementations should
 impose a nesting depth limit that may be user-defined, and in the face
 of which, cyclic checking may be ignored by an encoder. I emit nesting
 depth overflows as literalnull; might also throw an error. Since I was
 asked, the common “standard” value is to restrict nesting depth is 32,
 unless the user specified one. (I also saw 8, but 32 WFM pretty well.)
 Most seem to use it even if it may seem low at first. Only specialised
 applications probably need more, and they can always pass a value.</p>
<p>For my forth proposal, backslash-escape U+007F‥U+009F always. It may
 upset humans, editors, databases, etc. (This paragraph is newly added,
 after some <a href="irc.htm">IRC</a> discussion.)</p>
<p>All these do not permit anything that wasn’t accepted to be accepted
 afterwards. I’ve got a fifth proposal which changes acceptance rules –
 but only for a subset of parsers: formally JSON is defined in ECMA-262
 as industry standard that, in contrast to RFC 4627, always allowed any
 Value as top-level element of a JSON text. I’d like to make it so, and
 ignore the RFC’s requirement for it to be an Object or Array. Even so,
 the first two characters (after the BOM, if any) of a JSON text always
 are in the non-NUL 7-bit ASCII range, allowing for encoding detection.
 (This is done by the NUL octet pattern in the first four octets.)</p>
<p>JSON has only taken off because it’s a tightly defined simple format
 that can be used “everywhere” and isn’t too awful for humans (escaping
 not needed for U+0020‥U+D7FF and U+E000‥U+FFFD after all, although I’d
 also take the C1 control characters out, see my forth proposal above).
 I’ve started to use a trailing comma in indexed and associative arrays
 in code I write at work, when the array values are one a line, to help
 version control systems to do their diffs, but refrain from asking for
 a JSON extension to permit that in order to not endanger compatibility
 any (no comment needed, it’s just not worth it), but I’d like my above
 proposals to be followed by implementators (and I’m one of them).</p>
<p>Some more discussion with Jonathan pointed out that JSON5 allows for
 trailing commata in Object and Array; IMHO the only feature of it that
 is not bad or outright harmful. I’ll probably keep from accepting them
 because, on their own, they’re not <em>that</em> useful, and I usually
 would run JSON texts, even configs, through a parser/encoder roundtrip
 to pretty-print them which would lose them anyway.</p>
<p>As for binary-safeness: probably best to just use base64 and let the
 outer layers worry about compression. The data is usually unrelated to
 the JSON-encoded structure, and even if it’s related to other data the
 base64 representation is usually similar (unless misaligned).</p>
<p><strong>Update</strong> 02.12.2012 – Wrong I was about the first two
 characters: “"€"” is a valid JSON text. Still possible to peek at four
 octets and determine the encoding by ordering the tests; updated my <a
 href="cvs.cgi/contrib/hosted/tg/code/MirJSON/json.txt?rev=HEAD">notes</a>.</p>
</div>
<div class="wlentry">
<div class="wltitle">
<h2 class="wlentry" id="e20121012-bsiegert-g10050_wlog-10"><a href="permalinks/wlog-10_e20121012-bsiegert-g10050.htm#e20121012-bsiegert-g10050_wlog-10">Go on NetBSD</a></h2>
<div class="wlsubtitle">12.10.2012 by <a href="mailto:bsiegert@mirbsd.org">bsiegert@</a></div>
<div class="wltagtitle">Tags: golang</div>
</div>
<p>Starting today, I am running continuous builders for Go on NetBSD/386
 and NetBSD/amd64. Both are running fine, so Go is now (semi-officially)
 supported on NetBSD. You need at least version 5.99.51 or, even better,
 a NetBSD-6.0 release candidate. In addition, the latest Go release
 (1.0.3) does not have the NetBSD support, so you must build from source
 on tip.</p>

<p>Go 1.1, which is expected for January 2013, will support NetBSD on
 x86 officially.</p>
</div>
<div class="wlentry">
<div class="wltitle">
<h2 class="wlentry" id="e20121012-bsiegert_wlog-10"><a href="permalinks/wlog-10_e20121012-bsiegert.htm#e20121012-bsiegert_wlog-10">Source Code Pro</a></h2>
<div class="wlsubtitle">12.10.2012 by <a href="mailto:bsiegert@mirbsd.org">bsiegert@</a></div>
</div>
<p>There are a lot of monospaced fonts or “programmer’s fonts” available
 these days. Personally, I like neither the default “sans” that is
 generally used in Gtk applications nor the default monospace font in
 Mac&nbsp;OS&nbsp;X, Menlo. Both fonts are very similar, as Menlo is
 based on Bitstream Vera Sans.</p>

<p>Now, Adobe has just released an excellent monospaced OpenType font,
 called
 <a href="http://blogs.adobe.com/typblography/2012/09/source-code-pro.html"><i>Source
 Code Pro</i></a>,
 as open source. The fonts can be directly downloaded from
 <a href="http://sourceforge.net/projects/sourcecodepro.adobe/">their
 SourceForge page</a>.</p>

<p>(Of course, if you are into non-antialiased fonts, nothing beats the
 “fixed” font included with X.)</p>
</div>
<div class="wlentry">
<div class="wltitle">
<h2 class="wlentry" id="e20120812-bsiegert-g10049_wlog-10"><a href="permalinks/wlog-10_e20120812-bsiegert-g10049.htm#e20120812-bsiegert-g10049_wlog-10">pkgsrc-2012Q2 binary packages available</a></h2>
<div class="wlsubtitle">12.08.2012 by <a href="mailto:bsiegert@mirbsd.org">bsiegert@</a></div>
<div class="wltagtitle">Tags: <a href="news_all.htm#e20120812-bsiegert-g10049_wlog-10">news</a> pkgsrc</div>
</div>
<p>Packages for pkgsrc-2012Q2 are now available on ftp.NetBSD.org. They
 have been built for MirBSD-current on i386. This time, there is notably
 a much larger selection of software for X11, due to a successful build
 of gtk+2. All in all, there are about 6300 packages available.</p>
</div>
<div class="wlentry">
<div class="wltitle">
<h2 class="wlentry" id="e20120812-bsiegert_wlog-10"><a href="permalinks/wlog-10_e20120812-bsiegert.htm#e20120812-bsiegert_wlog-10">Latest MirOS developments</a></h2>
<div class="wlsubtitle">12.08.2012 by <a href="mailto:bsiegert@mirbsd.org">bsiegert@</a></div>
<div class="wltagtitle">Tags: kernel jupp pkgsrc</div>
</div>
<p>There have been some interesting recent developments in MirBSD. As
 always, there has been development on mksh but tg@ is more qualified to
 write about this.</p>

<p>The kernel has also seen some improvements: <a href="htman/i386/man4/bge.htm" class="manlink">bge(4)</a> is now again
 included in the GENERIC kernel, and it supports some newer chips – for
 example the BCM5751 Gigabit Ethernet. This chip is the one in the
 machine graciously donated by Marc Balmer. The <a href="htman/i386/man4/umsm.htm" class="manlink">umsm(4)</a> driver has been
 added, supporting certain 3G “surf sticks”.</p>

<p>There has been a new
 <a href="jupp.htm">release of jupp</a>,
 joe-3_1jupp21, containing several critical fixes regarding the use of
 uninitialized memory. It also contains a bugfix for syntax
 highlighting.</p>

<p>In pkgsrc, have been attacking the list of broken packages breaking
 the highest number others. The three versions of Ruby in the tree
 (1.8.x, 1.9.2 and 1.9.3) now build fine, as do ilmbase, blas and a few
 others. Fixing blas meant introducing a weird special case in libtool:
 Usually, MirBSD has no Fortran compiler; however, pkgsrc has f2c, which
 it uses as <tt>f77</tt>, confusing libtool. It actually needed a
 special-case entry to treat it like gcc (which it uses internally).
 There is also a weird failure in policykit, where an XSLT processor
 segfaults during the creation of one of the manpages. Maybe it hits an
 ulimit, I am not sure. Anyway, these fixes are now in pkgsrc-current.
</p>
</div>
<p class="linkbot"><a href="wlog-10_all.htm">All</a> <a href="wlog-10.htm">1</a> <a href="wlog-10_2.htm">2</a> <a href="wlog-10_3.htm">3</a> <a href="wlog-10_4.htm">4</a> <a href="wlog-10_5.htm">5</a> <a href="wlog-10_6.htm">6</a> <a href="wlog-10_7.htm">7</a> <a href="wlog-10_8.htm">8</a> <a href="wlog-10_9.htm">9</a> <a href="wlog-10_10.htm">10</a> <a href="wlog-10_11.htm">11</a> <a href="wlog-10_12.htm">12</a> <a href="wlog-10_13.htm">13</a> <a href="wlog-10_14.htm">14</a> <a href="wlog-10_15.htm">15</a> <a href="wlog-10_16.htm">16</a> <a href="wlog-10_17.htm">17</a> <a href="wlog-10_18.htm">18</a> <a href="wlog-10_19.htm">19</a> <a href="wlog-10_20.htm">20</a> <a href="wlog-10_21.htm">21</a> <a href="wlog-10_22.htm">22</a> <a href="wlog-10_23.htm">23</a> <a href="wlog-10_24.htm">24</a> <a href="wlog-10_25.htm">25</a> <a href="wlog-10_26.htm">26</a> <a href="wlog-10_27.htm">27</a> <a href="wlog-10_28.htm">28</a> <a href="wlog-10_29.htm">29</a></p>
</div>
<div class="footer">
<p style="display: none;">Do <em>not</em> send any eMail to <a
 href="mailto:junk@mirbsd.de">junk@mirbsd.de</a>, <a
 href="mailto:junk@mirbsd.org">junk@mirbsd.org</a>, or <a
 href="mailto:junk@mirsolutions.de">junk@mirsolutions.de</a> –
 it won’t do any good to you.</p>
<p>• <a
 href="mailto:miros-discuss@mirbsd.org">eMail</a> contact to The MirOS Project
 • <a href="imprint.htm">Impressum</a> • This website is (supposed
 to be) <a href="http://validator.w3.org/check/referer">Valid HTML</a>! •
</p>
<p class="rcsdiv">Generated <!-- MBSD_HTSCONV_GENDATE_TAG_30284 --> on <span class="rcsid">2013-08-23 23:38:55</span> by <span class="rcsid">$MirOS: www/mk/htsconv,v 1.71 2013/06/08 16:55:56 tg Exp $</span> and <span class="rcsid">$MirOS: www/mk/parser,v 1.23 2012/07/15 14:21:44 tg Exp $</span> and <span class="rcsid">$MirOS: www/mk/inc2htm,v 1.32 2013/08/01 09:39:50 tg Exp $</span> from <span class="rcsid">$MirOS: www/data/wlog-10.cfg,v 1.5 2008/12/04 20:55:09 tg Exp $</span> and <span class="rcsid">$MirOS: www/data/wlog-10.inc,v 1.434 2013/08/23 23:37:52 tg Exp $</span></p>
</div></div>
<div class="heading">
 <img class="hdrlnks" alt="MirOS Logo"
  src="pics/logo-grey.png" />
</div>
</body></html>
